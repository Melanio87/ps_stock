/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import Connection.Coneccion;
import Entity.Clientes;
import Entity.Comunicador;
import Entity.Empresa;
import Entity.ItemVen;
import Entity.Mesa;
import Entity.MyIcon;
import Entity.Productos;
import Entity.Usuario;
import Entity.Venta;
import Entity.deucli;
import java.awt.Component;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;

/**
 *
 * @author Melanio
 */
public class Ventas_restaurant extends javax.swing.JInternalFrame {

    /**
     * Creates new form Ventas
     */
    DefaultTableModel modelo;
    Productos pro = new Productos();
    TableRowSorter<TableModel> sorter;
    DecimalFormat df = new DecimalFormat("###,###,###.##");
    DecimalFormat dfCan = new DecimalFormat("###,###,###.###");
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    Clientes clie = new Clientes();
    Clientes scli;
    public Usuario usu = (Usuario) Comunicador.getObjeto();

    Calendar Cfecha = new GregorianCalendar();
    String fecha = "";

    double Saldo = 0.0;
    double Entrega = 0.0;
    URL archi;
    Coneccion coneccion;
    Connection con;
    Statement stmt;

    public static ver_total_rest vt;
    private Frame ven;

    int codvent = 0;
    int tipfac = 1, cbZ = 0, cbCP = 0, cbMont = 0;
    double cantPro = 1;

    JTextField cellToEdit;

    private Empresa emp;

    Mesa mesa;

    Venta ventas;

    ArrayList<ItemVen> itemvenList = new ArrayList<>();

    public Ventas_restaurant() {
        initComponents();
        TableModel();
        usuario();

        jlDeuda.setVisible(true);
        jtxMonDeu.setVisible(true);
        jRBCredito.setVisible(true);
        jRBContado.setVisible(true);
        txFecha.setText(sdf.format(Cfecha.getTime()));

        txCodCli.setText("0");
        txDesCli.setText("Cliente ocasional");
        txCodCli.grabFocus();
    }

    private void conectar() {
        try {
            coneccion = new Coneccion();
            con = coneccion.getCon();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, closable);
        }
    }

    private void usuario() {
        if (usu.getAcc_id() != null) {
            txCodUsu.setText(usu.getAcc_id().toString());
            txDesusu.setText(usu.getAcc_nombre());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bGTipos = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        txCantidad = new javax.swing.JTextField();
        txPrecio = new javax.swing.JTextField();
        txDescri = new javax.swing.JTextField();
        jBAgregar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaVentas = new javax.swing.JTable();
        TXcODIGO = new javax.swing.JTextField();
        txPrecio1 = new javax.swing.JTextField();
        txPrecio2 = new javax.swing.JTextField();
        txTotal = new javax.swing.JTextField();
        txCan = new javax.swing.JTextField();
        txCodCli = new javax.swing.JTextField();
        txDesCli = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jlDeuda = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jRBContado = new javax.swing.JRadioButton();
        jRBCredito = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jtxMonDeu = new javax.swing.JTextField();
        txCodMesa = new javax.swing.JTextField();
        txDesMesa = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        txCodUsu = new javax.swing.JTextField();
        txDesusu = new javax.swing.JTextField();
        btCancel = new javax.swing.JButton();
        txFecha = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txNumVent = new javax.swing.JTextField();
        btreimp = new javax.swing.JButton();
        btnConti = new javax.swing.JButton();

        setClosable(true);
        setTitle("Registrar Ventas");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(null);

        txCantidad.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txCantidad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txCantidadFocusGained(evt);
            }
        });
        txCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txCantidadActionPerformed(evt);
            }
        });
        txCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txCantidadKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txCantidadKeyPressed(evt);
            }
        });
        jPanel1.add(txCantidad);
        txCantidad.setBounds(590, 120, 130, 29);

        txPrecio.setEditable(false);
        txPrecio.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txPrecio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txPrecio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txPrecioFocusGained(evt);
            }
        });
        txPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txPrecioKeyTyped(evt);
            }
        });
        jPanel1.add(txPrecio);
        txPrecio.setBounds(380, 160, 190, 32);

        txDescri.setEditable(false);
        txDescri.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txDescri.setFocusable(false);
        txDescri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txDescriActionPerformed(evt);
            }
        });
        jPanel1.add(txDescri);
        txDescri.setBounds(150, 120, 330, 28);

        jBAgregar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jBAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_add.png"))); // NOI18N
        jBAgregar.setMnemonic('A');
        jBAgregar.setText("Agregar");
        jBAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarActionPerformed(evt);
            }
        });
        jBAgregar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBAgregarKeyPressed(evt);
            }
        });
        jPanel1.add(jBAgregar);
        jBAgregar.setBounds(590, 150, 130, 44);

        TablaVentas.setBackground(new java.awt.Color(252, 252, 185));
        TablaVentas.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        TablaVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "CODIGO", "DESCRIPCION", "CANTIDAD", "PRECIO", "TOTAL", "DESCUENTO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaVentas.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        TablaVentas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TablaVentas.setRowHeight(20);
        TablaVentas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TablaVentasFocusGained(evt);
            }
        });
        TablaVentas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaVentasMouseClicked(evt);
            }
        });
        TablaVentas.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                TablaVentasPropertyChange(evt);
            }
        });
        TablaVentas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TablaVentasKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(TablaVentas);
        if (TablaVentas.getColumnModel().getColumnCount() > 0) {
            TablaVentas.getColumnModel().getColumn(1).setMinWidth(250);
        }

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 200, 710, 230);

        TXcODIGO.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        TXcODIGO.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TXcODIGOFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TXcODIGOFocusLost(evt);
            }
        });
        TXcODIGO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXcODIGOKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TXcODIGOKeyPressed(evt);
            }
        });
        jPanel1.add(TXcODIGO);
        TXcODIGO.setBounds(20, 120, 120, 32);

        txPrecio1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        txPrecio1.setEnabled(false);
        txPrecio1.setFocusable(false);
        jPanel1.add(txPrecio1);
        txPrecio1.setBounds(20, 160, 120, 30);

        txPrecio2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        txPrecio2.setEnabled(false);
        txPrecio2.setFocusable(false);
        jPanel1.add(txPrecio2);
        txPrecio2.setBounds(150, 160, 120, 30);

        txTotal.setEditable(false);
        txTotal.setBackground(new java.awt.Color(0, 102, 0));
        txTotal.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txTotal.setFocusable(false);
        txTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txTotalActionPerformed(evt);
            }
        });
        jPanel1.add(txTotal);
        txTotal.setBounds(560, 430, 160, 32);

        txCan.setEditable(false);
        txCan.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        txCan.setFocusable(false);
        jPanel1.add(txCan);
        txCan.setBounds(490, 120, 80, 29);

        txCodCli.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txCodCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txCodCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txCodCliFocusLost(evt);
            }
        });
        txCodCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txCodCliActionPerformed(evt);
            }
        });
        txCodCli.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txCodCliKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txCodCliKeyPressed(evt);
            }
        });
        jPanel1.add(txCodCli);
        txCodCli.setBounds(20, 20, 120, 27);

        txDesCli.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txDesCli.setEnabled(false);
        jPanel1.add(txDesCli);
        txDesCli.setBounds(150, 20, 420, 27);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Cantidad:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(600, 100, 70, 20);

        jlDeuda.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlDeuda.setText("Deuda Cliente:");
        jPanel1.add(jlDeuda);
        jlDeuda.setBounds(600, 0, 90, 20);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("F4-Producto:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(20, 100, 78, 20);

        bGTipos.add(jRBContado);
        jRBContado.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jRBContado.setSelected(true);
        jRBContado.setText("CONTADO");
        jPanel1.add(jRBContado);
        jRBContado.setBounds(10, 430, 108, 24);

        bGTipos.add(jRBCredito);
        jRBCredito.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jRBCredito.setText("CREDITO");
        jRBCredito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBCreditoActionPerformed(evt);
            }
        });
        jPanel1.add(jRBCredito);
        jRBCredito.setBounds(120, 430, 101, 24);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("F4-Cliente");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(20, 0, 90, 20);

        jtxMonDeu.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jtxMonDeu.setEnabled(false);
        jtxMonDeu.setFocusable(false);
        jPanel1.add(jtxMonDeu);
        jtxMonDeu.setBounds(590, 20, 130, 27);

        txCodMesa.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txCodMesa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txCodMesaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txCodMesaFocusLost(evt);
            }
        });
        txCodMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txCodMesaActionPerformed(evt);
            }
        });
        txCodMesa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txCodMesaKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txCodMesaKeyPressed(evt);
            }
        });
        jPanel1.add(txCodMesa);
        txCodMesa.setBounds(20, 70, 120, 27);

        txDesMesa.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txDesMesa.setEnabled(false);
        jPanel1.add(txDesMesa);
        txDesMesa.setBounds(150, 70, 420, 27);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("F4-Mesas");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(20, 50, 57, 20);

        saveButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/pagos32.png"))); // NOI18N
        saveButton.setMnemonic('g');
        saveButton.setText("Finalizar");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        txCodUsu.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txCodUsu.setEnabled(false);

        txDesusu.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txDesusu.setEnabled(false);

        btCancel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_cancel.png"))); // NOI18N
        btCancel.setMnemonic('c');
        btCancel.setText("Cancelar");
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });

        txFecha.setEditable(false);
        txFecha.setFocusable(false);

        jLabel2.setText("N° de venta procesada:");

        txNumVent.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        txNumVent.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txNumVent.setEnabled(false);
        txNumVent.setFocusable(false);

        btreimp.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btreimp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/printer.png"))); // NOI18N
        btreimp.setText("Reimpresión");
        btreimp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btreimpActionPerformed(evt);
            }
        });

        btnConti.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnConti.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_save.png"))); // NOI18N
        btnConti.setMnemonic('g');
        btnConti.setText("Continuar");
        btnConti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(txNumVent, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnConti)
                        .addGap(40, 40, 40)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btreimp, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txCodUsu, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txDesusu, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addComponent(txFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txCodUsu, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txDesusu, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(2, 2, 2)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(txNumVent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btreimp)
                            .addComponent(btCancel)
                            .addComponent(saveButton)
                            .addComponent(btnConti)))))
        );

        setBounds(0, 0, 780, 587);
    }// </editor-fold>//GEN-END:initComponents

    private void jBAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarActionPerformed
        if (!txCantidad.getText().isEmpty() && !txPrecio.getText().isEmpty()) {

            try {
                double ct = df.parse(txCantidad.getText()).doubleValue();
                double cd = df.parse(txCan.getText().toString()).doubleValue();
                if (ct > cd) {
                    /*int o = JOptionPane.showConfirmDialog(this, "Cantidad de item supera la "
                     + "cantidad de producto disponible.\n"
                     + "Deseas continuar.?", "Aviso", JOptionPane.YES_NO_OPTION);
                     System.out.println(o);*/
                    //if (o == 0) {
                    CargarTabla();

                    TXcODIGO.setText("");
                    txDescri.setText("");
                    txPrecio1.setText("");
                    txPrecio2.setText("");
                    txPrecio.setText("");
                    txCan.setText("");
                    txCantidad.setText("");

                    TXcODIGO.grabFocus();
                    // } else {
                    //     txCantidad.grabFocus();
                    // }
                } else {
                    CargarTabla();

                    TXcODIGO.setText("");
                    txDescri.setText("");
                    txPrecio1.setText("");
                    txPrecio2.setText("");
                    txPrecio.setText("");
                    txCan.setText("");
                    txCantidad.setText("");

                    TXcODIGO.grabFocus();
                }

            } catch (ParseException | HeadlessException e) {
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_jBAgregarActionPerformed

    private void TXcODIGOKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXcODIGOKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F4) {
            ver_Produ vpro = new ver_Produ(null, true);

            vpro.setVisible(true);
            pro = vpro.vPro;
            if (pro != null) {
                TXcODIGO.setText(pro.getProCodigo().toString());
                txDescri.setText(pro.getProDescri().trim());
                txPrecio1.setText(pro.getProPre2().toString());
                txPrecio2.setText(pro.getProPre3().toString());
                txPrecio.setText(pro.getProPre3().toString());
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (TXcODIGO.getText().isEmpty()) {
                ver_Produ vpro = new ver_Produ(null, true);

                vpro.setVisible(true);
                pro = vpro.vPro;
                if (pro != null) {
                    TXcODIGO.setText(pro.getProCodigo().toString());
                    txDescri.setText(pro.getProDescri().trim());
                    txPrecio1.setText(pro.getProPre2().toString());
                    txPrecio2.setText(pro.getProPre3().toString());
                    txPrecio.setText(pro.getProPre3().toString());
                }
            } else {
                txCantidad.grabFocus();
            }
        }
    }//GEN-LAST:event_TXcODIGOKeyPressed

    private void TXcODIGOFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TXcODIGOFocusLost
        if (!TXcODIGO.getText().isEmpty()) {
            String cod = TXcODIGO.getText().trim();
            int canText = cod.length();
            /*if (canText == 13) {
             cbZ = Integer.parseInt(cod.substring(0, 1));
             if (cbZ == 1) {
             cbCP = Integer.parseInt(cod.substring(1, 7));
             cbMont = Integer.parseInt(cod.substring(7, 12));
             } else {
             if (cbZ == 2) {
             cbCP = Integer.parseInt(cod.substring(1, 6));
             cbMont = Integer.parseInt(cod.substring(6, 12));
             }
             }

             System.out.println("zona" + cbZ + "\nCodpro = " + cbCP + "\ntotal = " + cbMont);
             }*/
            cantPro = 1;
            consultar();
        }
    }//GEN-LAST:event_TXcODIGOFocusLost

    private void txPrecioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txPrecioFocusGained
        txPrecio.selectAll();
    }//GEN-LAST:event_txPrecioFocusGained

    private void txCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txCantidadKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && txCantidad.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txCantidadKeyTyped

    private void txPrecioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txPrecioKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && txPrecio.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txPrecioKeyTyped

    private void TXcODIGOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXcODIGOKeyTyped
        /*char c = evt.getKeyChar();
         if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
         && (c != '.')) {
         evt.consume();
         }
         if (c == '.' && TXcODIGO.getText().contains(".")) {
         evt.consume();
         }*/
    }//GEN-LAST:event_TXcODIGOKeyTyped

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (modelo.getRowCount() > 0) {
            if (jRBCredito.isSelected()) {
                if (!txCodCli.getText().toString().equalsIgnoreCase("0") && !txCodCli.getText().isEmpty()) {
                    RegVenta();
                } else {
                    JOptionPane.showMessageDialog(null, "Venta Credito, seleccione cliente.");
                    txCodCli.grabFocus();
                }
            } else {
                RegVenta();
            }

        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void GuaVenta() {
        int tipven;
        try {
            /*ven_cobro vc = new ven_cobro(null,true);
            
             vc.setTotal(df.parse(txTotal.getText().toString()).doubleValue());
             vc.setVisible(true);*/
            if (jRBContado.isSelected()) {
                Saldo = 0.0;
                Entrega = df.parse(txTotal.getText()).doubleValue();
                tipven = 0;
            } else {
                ven_cobro vc = new ven_cobro(null, true);

                vc.setTotal(df.parse(txTotal.getText()).doubleValue());
                vc.setVisible(true);

                Saldo = vc.saldo;
                Entrega = vc.entrega;
              
                tipven = 1;
            }

            try {

                ResultSet rs;
                int codvent = 0;

                String Hora = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
                Cfecha = Calendar.getInstance();
                fecha = sdf.format(Cfecha.getTime());

                Venta ven = new Venta();

                ven.setVen_cliente(Integer.parseInt(txCodCli.getText()));
                ven.setVen_fecha(sdf.parse(fecha));
                ven.setVen_hora(Hora);
                ven.setVen_codven(usu.getAcc_id());
                ven.setVen_total(Entrega);

                con.setAutoCommit(false);
                stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

                String sql = "Insert into ventas(ven_fecha,ven_hora,ven_codven,ven_total,ven_cliente,ven_tipo) values('"
                        + ven.getVen_fecha() + "','"
                        + ven.getVen_hora() + "',"
                        + ven.getVen_codven() + ","
                        + ven.getVen_total() + ","
                        + ven.getVen_cliente() + ","
                        + tipven
                        + ")";

                stmt.executeUpdate(sql);

                rs = stmt.executeQuery("SELECT last_value from ventas_ven_codigo_seq");

                if (rs.next()) {
                    codvent = rs.getInt(1);
                }

                for (int i = 0; i < modelo.getRowCount(); i++) {
                    ItemVen itv = new ItemVen();
                    itv.setItv_codven(codvent);
                    itv.setItv_codpro(Integer.parseInt(TablaVentas.getValueAt(i, 0).toString()));
                  
                    itv.setItv_canti(Double.parseDouble(TablaVentas.getValueAt(i, 2).toString()));
                    itv.setItv_precio(Double.parseDouble(TablaVentas.getValueAt(i, 3).toString()));

                    sql = "Insert into item_ventas( itv_codven,itv_codpro,itv_canti,itv_precio) values("
                            + itv.getItv_codven() + ","
                            + itv.getItv_codpro() + ","
                            + itv.getItv_canti() + ","
                            + itv.getItv_precio()
                            + ")";

                    stmt.executeUpdate(sql);

                }
                if (tipven == 1) {
                    sql = "insert into deucli(dcl_numven,dcl_monto,dcl_fecha,dcl_codcli) values("
                            + codvent + "," + Saldo + ",'" + ven.getVen_fecha() + "'," + ven.getVen_cliente() + ")";
                    stmt.executeUpdate(sql);
                }
                //JOptionPane.showMessageDialog(this, "Venta Registrado con éxito");
                con.commit();
                limpiar();

                MyIcon icon = new MyIcon();
                int seleccion = JOptionPane.showOptionDialog(null,
                        "Seleccione opcion de impresión",
                        "Selector de opciones",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        icon, // null para icono por defecto.
                        new Object[]{"COMUN", "FACTURA", "CANCELAR"}, // null para YES, NO y CANCEL
                        "COMUN");

                if (seleccion == 0) {
                    archi = this.getClass().getResource("/reports/fac_ticket_comun.jasper");
                    imprimir(codvent);
                } else if (seleccion == 1) {
                    archi = this.getClass().getResource("/reports/fac_ticket.jasper");
                    imprimir(codvent);
                }

                //con.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al registrar Ventas " + e.getMessage());
                System.out.println(e.getMessage());
            }
        } catch (ParseException ex) {
            Logger.getLogger(Ventas_restaurant.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void RegVenta() {
        int tipven;
        deucli deuc = new deucli();
        try {
            /*ven_cobro vc = new ven_cobro(null,true);
            
             vc.setTotal(df.parse(txTotal.getText().toString()).doubleValue());
             vc.setVisible(true);*/
            if (jRBContado.isSelected()) {
                Saldo = 0.0;
                Entrega = df.parse(txTotal.getText()).doubleValue();
                tipven = 0;
            } 

           
           

            vt = new ver_total_rest(null, true);
            vt.setVenta(ventas);
            vt.setDeu(deuc);
            vt.setVisible(true);
            codvent = vt.getNumven();
            txNumVent.setText(String.valueOf(codvent));
            tipfac = vt.getTipfac();

            if (vt.getSitu() == 1) {
                MyIcon icon = new MyIcon();
                int seleccion;
                if (tipfac == 1) {
                    seleccion = JOptionPane.showOptionDialog(null,
                            "Seleccione opcion de impresión",
                            "Selector de opciones",
                            JOptionPane.YES_NO_CANCEL_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            icon, // null para icono por defecto.
                            new Object[]{"IMPRIMIR", "CANCELAR"}, // null para YES, NO y CANCEL
                            "IMPRIMIR");
                } else {
                    seleccion = 0;
                }
                if (seleccion == 0) {

                    if (tipfac == 1) {
                        limpiar();
                        archi = this.getClass().getResource("/reports/fac_ticket_comun.jasper");

                        for (int i = 0; i < emp.getEmp_cantick(); i++) {
                            imprimir(codvent);
                        }
                    } else {
                        limpiar();
                        // archi = this.getClass().getResource("/reports/fac_ticket.jasper");
                        archi = this.getClass().getResource("/reports/fac_legal1.jasper");
                        for (int i = 0; i < emp.getEmp_cantickleg(); i++) {
                            imprimir(codvent);
                        }

                    }

                } else {
                    limpiar();
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(Ventas_restaurant.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean RestPro() {
        try {
            /*coneccion = new Coneccion();
             con = coneccion.getCon();
             con.setAutoCommit(false);
             stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
             for (int i = 0; i < modelo.getRowCount(); i++) {
             ItemVen itv = new ItemVen();
             itv.setItv_codven(codvent);
             itv.setItv_codpro(Integer.parseInt(TablaVentas.getValueAt(i, 0).toString()));
             itv.setItv_canti(Double.parseDouble(TablaVentas.getValueAt(i, 2).toString()));
             itv.setItv_precio(Double.parseDouble(TablaVentas.getValueAt(i, 3).toString()));

             stmt.executeUpdate("update productos set pro_cant= " + "(pro_cant + " + itv.getItv_canti() + ") "
             + "where pro_codigo=" + itv.getItv_codpro());
             }
             con.commit();
             con.close();*/
            return true;
        } catch (NumberFormatException e) {

        }
        return false;
    }

    private void imprimir(int codven) throws ParseException {
        JasperReport reporte;
        JasperPrint reporte_view;
        coneccion = new Coneccion();
        con = coneccion.getCon();
        try {

            //archi = this.getClass().getResource("/reports/inf_factura.jasper");
            reporte = (JasperReport) JRLoader.loadObject(archi);
            Map<String, Object> param = new HashMap<>();
            param.put("NUMVEN", codven);
            reporte_view = JasperFillManager.fillReport(reporte, param, con);
            //JasperViewer.viewReport(reporte_view, false);
            JasperPrintManager.printReport(reporte_view, false);
            /*JasperPrintManager print1 = new JasperPrintManager();
             print1.printReport(reporte_view,false);*/
            //terminamos la conexion a la base de datos
            con.close();
            //limpiar();
        } catch (JRException E) {
        } catch (SQLException ex) {
            Logger.getLogger(Ventas_restaurant.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    private void TablaVentasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TablaVentasKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int filasele = TablaVentas.getSelectedRow();

            try {
                //coneccion = new Coneccion();
                //con = coneccion.getCon();
                Number tot = df.parse(txTotal.getText());
                Number rtot = df.parse(TablaVentas.getValueAt(filasele, 4).toString());

                
                txTotal.setText(df.format((tot.doubleValue() - rtot.doubleValue())));
                
                ventas.setVen_total((tot.doubleValue() - rtot.doubleValue()));
                
                int codven = Integer.parseInt(txNumVent.getText());
                int codpro = Integer.parseInt(TablaVentas.getValueAt(filasele, 0).toString());

                for(ItemVen item:itemvenList){
                    if(item.getItv_codpro() == codpro && item.getItv_codven() == codven){
                        itemvenList.remove(item);
                        break;
                    }
                }
                
                for(int i=0;i < itemvenList.size();i++){
                    
                }
                
                conectar();

                stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                
                String sql="delete from item_ventas where itv_codven="+codven
                        +" and itv_codpro = "+codpro;
                stmt.execute(sql);
               
                stmt.executeUpdate("update productos set pro_cant= " + "(pro_cant + " + Double.parseDouble(TablaVentas.getValueAt(filasele, 2).toString()) + ") "
                        + "where pro_codigo=" + codpro);
                con.close();
                
                TablaVentas.getCellEditor().stopCellEditing();

            } catch (Exception e) {
                System.out.println(e.getCause() + " " + e.getMessage());
            }

            modelo.removeRow(filasele);
            TXcODIGO.setText("");
            txDescri.setText("");
            txPrecio1.setText("");
            txPrecio2.setText("");
            txPrecio.setText("");
            txCan.setText("");
            txCantidad.setText("");
            TXcODIGO.grabFocus();

            //TablaVentas.setModel(modelo);
        } else {
            
        }
    }//GEN-LAST:event_TablaVentasKeyPressed

    private void TXcODIGOFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TXcODIGOFocusGained
        
        if(mesa != null){
            txCantidad.setText("");
            TXcODIGO.selectAll();
        }else{
            txCodMesa.grabFocus();
        }
       

    }//GEN-LAST:event_TXcODIGOFocusGained

    private void txCodCliKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txCodCliKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F4) {
            ver_Cliente vcli = new ver_Cliente(null, true);
            vcli.setVisible(true);
            clie = vcli.vClie;
            if (clie != null) {
                txCodCli.setText(clie.getCli_codigo().toString());
                txDesCli.setText(clie.getCli_nombre().trim());
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!txCodCli.getText().isEmpty()) {
                consultarCliente();
            } else {
                txCodCli.setText("0");
                txDesCli.setText("Cliente ocasional");
                txCodMesa.grabFocus();
            }
        }
    }//GEN-LAST:event_txCodCliKeyPressed

    public void llamarClie() {
        R_Clientes r_cli = new R_Clientes();
        this.add(r_cli);
        r_cli.setVisible(true);
    }
    private void txCodCliKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txCodCliKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && TXcODIGO.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txCodCliKeyTyped

    private void txCodCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txCodCliFocusGained
        txCodCli.selectAll();
        //TXcODIGO.requestFocus();
    }//GEN-LAST:event_txCodCliFocusGained

    private void txCodCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txCodCliFocusLost
        if (!txCodCli.getText().isEmpty()) {
            consultarCliente();
        } else {
            txCodCli.setText("0");
            txDesCli.setText("Cliente ocasional");
        }
        txCodMesa.grabFocus();
    }//GEN-LAST:event_txCodCliFocusLost

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        if (modelo.getRowCount() > 0) {
            if (RestPro()) {
                limpiar();
                txCodCli.setText("");
                txDesCli.setText("");
                txCodCli.grabFocus();
            }
        } else {
            limpiar();
            txCodCli.setText("");
            txDesCli.setText("");
            txCodCli.grabFocus();
        }


    }//GEN-LAST:event_btCancelActionPerformed

    private void jRBCreditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBCreditoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRBCreditoActionPerformed

    private void jBAgregarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBAgregarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jBAgregar.doClick();
        }
    }//GEN-LAST:event_jBAgregarKeyPressed

    private void txCantidadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txCantidadKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!txCantidad.getText().isEmpty()) {
                try {
                    double cant = df.parse(txCantidad.getText()).doubleValue();
                    if (cant > 0) {
                        jBAgregar.doClick();
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(Ventas_restaurant.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }//GEN-LAST:event_txCantidadKeyPressed

    private void txCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txCantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txCantidadActionPerformed

    private void txDescriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txDescriActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txDescriActionPerformed

    private void txCantidadFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txCantidadFocusGained
        txCantidad.setText(dfCan.format(cantPro));
        txCantidad.selectAll();
    }//GEN-LAST:event_txCantidadFocusGained

    private void btreimpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btreimpActionPerformed
        reImpresion reimp = new reImpresion(null, true);
        reimp.setVisible(true);
    }//GEN-LAST:event_btreimpActionPerformed

    private void TablaVentasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaVentasMouseClicked
        //   **
        try {

            if (TablaVentas.getSelectedColumn() == 2) {
                //System.out.println(TablaVentas.getSelectedRow() + "-" + TablaVentas.getSelectedColumn());
                TablaVentas.setColumnSelectionAllowed(true);
                TablaVentas.setRowSelectionAllowed(true);
                boolean success = TablaVentas.editCellAt(TablaVentas.getSelectedRow(), 2);
                if (success) {
                    //TablaVentas.changeSelection(TablaVentas.getSelectedRow(), 2, false, false);
                    TablaVentas.getEditorComponent().requestFocus();
                    cellToEdit = (JTextField) TablaVentas.getEditorComponent();
                    cellToEdit.selectAll();

                    Action action = new AbstractAction() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            try {
                                //System.out.println("some action");
                                int row = TablaVentas.getSelectedRow();
                                System.out.println("pre--> "+TablaVentas.getValueAt(row, 3).toString());
                                double precio = df.parse(TablaVentas.getValueAt(row, 3).toString()).doubleValue();
                                double cant = Double.parseDouble(cellToEdit.getText());
                                double antTot = df.parse(TablaVentas.getValueAt(row, 4).toString()).doubleValue();
                                System.out.println(antTot + " - " + precio + " - " + cant);
                                double total = cant * precio;
                                 System.out.println(total);
                                double genTot = df.parse(txTotal.getText()).doubleValue();
                                genTot = genTot - antTot;
                                genTot = genTot + total;
                                TablaVentas.setValueAt(df.format(total), row, 4);
                                txTotal.setText(df.format(genTot));
                                TablaVentas.setValueAt(df.format(0), row, 5);
                                cellToEdit.removeActionListener(this);
                                TablaVentas.getCellEditor().stopCellEditing();
                                TXcODIGO.grabFocus();
                                
                                int codpro = Integer.parseInt(TablaVentas.getValueAt(row, 0).toString());
                                
                                 for(int iv=0; iv < itemvenList.size();iv++){
                                    ItemVen iven= itemvenList.get(iv);
                                    if(iven.getItv_codpro()==codpro){
                                        itemvenList.get(iv).setItv_canti(cant);
                                        break;
                                    }
                                }

                                //TablaVentas.editCellAt(TablaVentas.getSelectedRow(), 4);
                                //TablaVentas.changeSelection(TablaVentas.getSelectedRow(), 4, true, false);
                                //TablaVentas.getEditorComponent().requestFocus();
                            } catch (Exception err) {
                            }

                        }
                    };

                    cellToEdit.addActionListener(action);

                }

            } else if (TablaVentas.getSelectedColumn() == 4) {
                //System.out.println(TablaVentas.getSelectedRow() + "-" + TablaVentas.getSelectedColumn());
                TablaVentas.setColumnSelectionAllowed(true);
                TablaVentas.setRowSelectionAllowed(true);
                boolean success = TablaVentas.editCellAt(TablaVentas.getSelectedRow(), 4);
                if (success) {
                    //TablaVentas.changeSelection(TablaVentas.getSelectedRow(), 4, false, false);
                    TablaVentas.getEditorComponent().requestFocus();
                    cellToEdit = (JTextField) TablaVentas.getEditorComponent();
                    cellToEdit.selectAll();
                    final double subTot = df.parse(cellToEdit.getText()).doubleValue();
                    //System.out.print(subTot);
                    Action action = new AbstractAction() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            try {
                                //System.out.println("some action");
                                int row = TablaVentas.getSelectedRow();
                                double precio = Double.parseDouble(TablaVentas.getValueAt(row, 3).toString());
                                double newTot = Double.parseDouble(cellToEdit.getText());
                                cellToEdit.setText(df.format(newTot));
                                double descue;
                                double genTot = df.parse(txTotal.getText()).doubleValue();
                                if (newTot < subTot) {
                                    descue = subTot - newTot;
                                    genTot = genTot - descue;
                                    TablaVentas.setValueAt(df.format(descue), row, 5);
                                } else {
                                    genTot = genTot - subTot;
                                    genTot = genTot + newTot;
                                }
                                txTotal.setText(df.format(genTot));
                                cellToEdit.removeActionListener(this);
                                TablaVentas.getCellEditor().stopCellEditing();
                                TXcODIGO.grabFocus();
                            } catch (Exception err) {
                            }

                        }
                    };

                    cellToEdit.addActionListener(action);

                }
            }
            /*if (evt.getClickCount() == 1) {
             JTable table = (JTable) evt.getComponent();
             int row = table.convertRowIndexToModel(table.rowAtPoint(evt.getPoint()));

             table.setColumnSelectionAllowed(true);
             table.setRowSelectionAllowed(true);

             boolean success = table.editCellAt(row, 2);
             if (success) {
             table.changeSelection(row, 2, false, false);
             table.getEditorComponent().requestFocus();
             //TablaVentas.setSurrendersFocusOnKeystroke(true);
             //if (table.getEditorComponent() instanceof JTextField) {
             cellToEdit = (JTextField) table.getEditorComponent();
             cellToEdit.selectAll();

             // }
             }
             }*/
        } catch (Exception e) {

        }
    }//GEN-LAST:event_TablaVentasMouseClicked

    public Component getTableCellEditorComponent(JTable table, Object value,
            boolean isSelected, int row, int column) {
        TextField texto = new TextField();
        texto.setText("50");
        texto.selectAll();
        return texto;
    }

    private void TablaVentasPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_TablaVentasPropertyChange

    }//GEN-LAST:event_TablaVentasPropertyChange

    private void TablaVentasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablaVentasFocusGained
        /*try {
         if (TablaVentas.getSelectedColumn() == 4) {
         System.out.println(TablaVentas.getSelectedRow() + "-" + TablaVentas.getSelectedColumn());
         TablaVentas.setColumnSelectionAllowed(true);
         TablaVentas.setRowSelectionAllowed(true);
         boolean success = TablaVentas.editCellAt(TablaVentas.getSelectedRow(), 4);
         if (success) {
         //TablaVentas.changeSelection(TablaVentas.getSelectedRow(), 4, false, false);
         TablaVentas.getEditorComponent().requestFocus();
         cellToEdit = (JTextField) TablaVentas.getEditorComponent();
         cellToEdit.selectAll();
         final double subTot = df.parse(cellToEdit.getText()).doubleValue();
         System.out.print(subTot);
         Action action = new AbstractAction() {
         @Override
         public void actionPerformed(ActionEvent e) {
         try {
         System.out.println("some action focus");
         int row = TablaVentas.getSelectedRow();
         double precio = Double.parseDouble(TablaVentas.getValueAt(row, 3).toString());
         double newTot = Double.parseDouble(cellToEdit.getText());
         double descue;
         double genTot = df.parse(txTotal.getText()).doubleValue();
         if (newTot < subTot) {
         descue = subTot - newTot;
         genTot = genTot - descue;
         TablaVentas.setValueAt(df.format(descue), row, 5);
         } else {
         genTot = genTot - subTot;
         genTot = genTot + newTot;
         }
         txTotal.setText(df.format(genTot));
         cellToEdit.removeActionListener(this);
         TablaVentas.getCellEditor().stopCellEditing();
         TXcODIGO.grabFocus();
         } catch (Exception err) {
         }

         }
         };

         cellToEdit.addActionListener(action);

         }
         }
         } catch (Exception err) {

         }*/
    }//GEN-LAST:event_TablaVentasFocusGained

    private void txTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txTotalActionPerformed

    private void txCodCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txCodCliActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txCodCliActionPerformed

    private void txCodMesaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txCodMesaFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txCodMesaFocusGained

    private void txCodMesaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txCodMesaFocusLost
        if (mesa != null && !mesa.isM_estado()) {
            consultarVenta(mesa.getM_codigo());
        }
    }//GEN-LAST:event_txCodMesaFocusLost

    private void txCodMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txCodMesaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txCodMesaActionPerformed

    private void txCodMesaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txCodMesaKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txCodMesaKeyTyped

    private void txCodMesaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txCodMesaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F4) {
            ver_mesass mesas = new ver_mesass(null, true);
            mesas.setVisible(true);
            mesa = mesas.mesa;
            if (mesas.mesa != null) {
                txCodMesa.setText(String.valueOf(mesa.getM_codigo()));
                txDesMesa.setText(mesa.getM_descri());
                TXcODIGO.grabFocus();
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!txCodMesa.getText().isEmpty()) {
                findByIdMesa(Integer.parseInt(txCodMesa.getText()));
                TXcODIGO.grabFocus();
            } else {
                JOptionPane.showMessageDialog(null, "Seleccionar mesa para continuar!");
                txCodMesa.grabFocus();
            }
        }

    }//GEN-LAST:event_txCodMesaKeyPressed

    private void btnContiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContiActionPerformed
        if (!txCodMesa.getText().isEmpty()) {
            if (!txNumVent.getText().isEmpty()) {
                updatePreVenta();
            } else {
                RegPreVenta();
            }
        }
    }//GEN-LAST:event_btnContiActionPerformed

    public void consultarCliente() {
        String sql;

        sql = "select cli_codigo,cli_ci,cli_nombre,cli_tel,cli_direc,"
                + "cli_ruc,cli_fecnac,sum(dcl_monto) as cli_deuda,cli_lispre from "
                + "clientes LEFT JOIN deucli deu ON deu.dcl_codcli = cli_codigo "
                + "  where cli_codigo =" + txCodCli.getText() + "  group by cli_codigo,cli_ci,"
                + "cli_nombre,cli_tel,cli_direc,cli_ruc,cli_fecnac,cli_lispre order by cli_codigo";

        Coneccion con = new Coneccion();
        ResultSet rs;
        Clientes cli = null;

        try {
            con.consulta(sql);
            rs = con.getRs();
            if (rs.next()) {
                scli = new Clientes();
                scli.setCli_codigo(rs.getInt("cli_codigo"));
                scli.setCli_nombre(rs.getString("cli_nombre"));
                scli.setCli_ci(rs.getInt("cli_ci"));
                scli.setCli_ruc(rs.getString("cli_ruc"));
                scli.setCli_direc(rs.getString("cli_direc"));
                scli.setCli_tel(rs.getString("cli_tel"));
                scli.setCli_fecnac(rs.getDate("cli_fecnac"));
                scli.setCli_lispre(rs.getInt("cli_lispre"));

                txDesCli.setText(rs.getString("cli_nombre"));

                if (rs.getString("cli_deuda") != null) {
                    jlDeuda.setVisible(true);
                    jtxMonDeu.setVisible(true);
                    jtxMonDeu.setText(df.format(rs.getDouble("cli_deuda")));
                }
            }
            TXcODIGO.grabFocus();
            con.close();
        } catch (Exception e) {
            if (con.getCon() != null) {
                con.close();
            }
        }
    }

    public void CargarTabla() throws ParseException {
        double total;
        //modelo.setRowCount(0);
        //  this.TablaVentas.setModel(modelo);
        /*coneccion = new Coneccion();
         con = coneccion.getCon();*/
        Productos p = pro;
        //System.out.print(p.toString());
        int sw = 0;
        if (modelo.getRowCount() > 0) {
            for (int i = 0; i < modelo.getRowCount(); i++) {
                int codpro = Integer.parseInt(TablaVentas.getValueAt(i, 0).toString());
                if (pro.getProCodigo() == codpro) {
                    double Acant = Double.parseDouble(TablaVentas.getValueAt(i, 2).toString());
                    double Ncant = df.parse(txCantidad.getText()).doubleValue() + Acant;
                    double Atot = df.parse(TablaVentas.getValueAt(i, 4).toString()).doubleValue();

                    total = ((df.parse(txPrecio.getText()).doubleValue())
                            * (Ncant));
                    TablaVentas.setValueAt(Ncant, i, 2);
                    TablaVentas.setValueAt(df.format(total), i, 4);

                    if (txTotal.getText().isEmpty()) {
                        txTotal.setText(df.format(total));
                    } else {
                        //
                        Number tot = df.parse(txTotal.getText());
                        total = total - Atot;
                        total = tot.doubleValue() + total;
                        
                        txTotal.setText(df.format(total));
                    }
                    sw = 1;
                    System.out.println("2 sw==1--> "+Ncant);
                    for(int iv=0; iv < itemvenList.size();iv++){
                        ItemVen iven= itemvenList.get(iv);
                        if(iven.getItv_codpro()==codpro){
                            itemvenList.get(iv).setItv_canti(Ncant);
                            break;
                        }
                    }
                    break;
                }
            }
            if (sw == 0) {
                Object[] Opro = new Object[modelo.getColumnCount()];
                Opro[0] = p.getProCodigo();
                Opro[1] = p.getProDescri();
                //System.out.println(df.parse(txCantidad.getText().toString()).doubleValue());
                double cantidad = df.parse(txCantidad.getText()).doubleValue();
                Opro[2] = cantidad;
                Opro[3] = df.format(df.parse(txPrecio.getText()).doubleValue());

                total = ((df.parse(txPrecio.getText()).doubleValue())
                        * (df.parse(txCantidad.getText()).doubleValue()));
                Opro[4] = df.format(total);
                Opro[5] = df.format(0);
                modelo.addRow(Opro);
                System.out.println("2 sw==0--> "+cantidad);
                ItemVen iven= new ItemVen();
                iven.setItv_canti(cantidad);
                iven.setItv_codpro(p.getProCodigo());
                //iven.setItv_codven(ventas.getVen_codigo());
                iven.setItv_precio(df.parse(txPrecio.getText()).doubleValue());
                itemvenList.add(iven);

                /*try {
                 stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                 stmt.executeUpdate("update productos set pro_cant= " + "(pro_cant - " + df.parse(txCantidad.getText().toString()).doubleValue() + ") "
                 + "where pro_codigo=" + p.getProCodigo());

                 con.close();
                 } catch (Exception e) {
                 JOptionPane.showMessageDialog(null, "Error" + e.getMessage());
                 }*/
                if (txTotal.getText().isEmpty()) {
                    txTotal.setText(df.format(total));
                } else {
                    //
                    Number tot = df.parse(txTotal.getText());
                    //System.out.println(tot);
                    total = tot.doubleValue() + total;
                    //System.out.println(total);
                    txTotal.setText(df.format(total));
                }
            }
        } else {

            Object[] Opro = new Object[modelo.getColumnCount()];
            Opro[0] = p.getProCodigo();
            Opro[1] = p.getProDescri();
            //System.out.println(df.parse(txCantidad.getText().toString()).doubleValue());
            Opro[2] = df.parse(txCantidad.getText()).doubleValue();
            Opro[3] = df.format(df.parse(txPrecio.getText()).doubleValue());

            total = ((df.parse(txPrecio.getText()).doubleValue())
                    * (df.parse(txCantidad.getText()).doubleValue()));
            Opro[4] = df.format(total);
            Opro[5] = df.format(0);
            modelo.addRow(Opro);

            /*try {
             stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
             stmt.executeUpdate("update productos set pro_cant= " + "(pro_cant - " + df.parse(txCantidad.getText().toString()).doubleValue() + ") "
             + "where pro_codigo=" + p.getProCodigo());

             con.close();
             } catch (Exception e) {
             JOptionPane.showMessageDialog(null, "Error" + e.getMessage());
             }*/
            if (txTotal.getText().isEmpty()) {
                txTotal.setText(df.format(total));
                } else {
                    //
                    Number tot = df.parse(txTotal.getText());
                    //System.out.println(tot);
                    total = tot.doubleValue() + total;
                    //System.out.println(total);
                    txTotal.setText(df.format(total));
                }
            //System.out.println("3 --> "+df.parse(txCantidad.getText()).doubleValue());
            ItemVen iven= new ItemVen();
                iven.setItv_canti(df.parse(txCantidad.getText()).doubleValue());
                iven.setItv_codpro(p.getProCodigo());
                //iven.setItv_codven(ventas.getVen_codigo());
                iven.setItv_precio(df.parse(txPrecio.getText()).doubleValue());
                itemvenList.add(iven);
            }
        
        //sorter = new TableRowSorter<TableModel>(modelo);
        //TablaVentas.setRowSorter(sorter);
        //TablaVentas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.TablaVentas.setModel(modelo);

    }

    private void TableModel() {
        modelo = (DefaultTableModel) TablaVentas.getModel();
        modelo.setRowCount(0);
        this.TablaVentas.setModel(modelo);

        // TablaVentas.setFillsViewportHeight(true);
        TablaVentas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        /*TablaVentas.setColumnSelectionAllowed(false);
         TablaVentas.setRowSelectionAllowed(false);
         TablaVentas.setCellSelectionEnabled(false);*/

    }

    public boolean prueba() {
        return true;
    }

    public void consultar() {
        String sql = "Select pro_codigo,pro_descri,pro_pre1,pro_pre2,pro_pre3,pro_cant,"
                + "pro_provee,pro_cate,pro_sect,pro_canmin,pro_venci"
                + " From productos where pro_cbarra='" + TXcODIGO.getText().trim() + "' order by pro_codigo";

        Coneccion con = new Coneccion();
        ResultSet rs;

        try {
            con.consulta(sql);
            rs = con.getRs();
            if (rs.next()) {
                pro = new Productos();
                pro.setProCodigo(rs.getInt("pro_codigo"));
                pro.setProDescri(rs.getString("pro_descri"));
                pro.setProPre1(rs.getBigDecimal("pro_pre1"));
                pro.setProPre2(rs.getBigDecimal("pro_pre2"));
                pro.setProPre3(rs.getBigDecimal("pro_pre3"));
                pro.setProCant(rs.getBigDecimal("pro_cant"));
                pro.setProProvee(rs.getInt("pro_provee"));
                pro.setProCate(rs.getInt("pro_cate"));
                pro.setProSect(rs.getInt("pro_sect"));
                pro.setProCanmin(rs.getBigDecimal("pro_canmin"));
                pro.setProVenci(rs.getDate("pro_venci"));

                if (pro.getProCanmin().doubleValue() > 0) {
                    if (pro.getProCant().doubleValue() <= pro.getProCanmin().doubleValue()) {
                        JOptionPane.showMessageDialog(null, "ATENCIÓN!, producto con cantidad mínimo.");
                    }
                }

                TXcODIGO.setText(pro.getProCodigo().toString());
                txDescri.setText(pro.getProDescri());
                txPrecio1.setText(pro.getProPre2().toString());
                txPrecio2.setText(pro.getProPre3().toString());
                if (txCodCli.getText().equals("0")) {
                    txPrecio.setText(df.format(pro.getProPre3()));
                } else if (scli.getCli_lispre() == 0) {
                    txPrecio.setText(df.format(pro.getProPre3()));
                } else {
                    txPrecio.setText(df.format(pro.getProPre2()));
                }
                txCan.setText(df.format(pro.getProCant()));

                txCantidad.setText(dfCan.format(cantPro));
                // jBAgregar.doClick();

            } else {
                sql = "Select pro_codigo,pro_descri,pro_pre1,pro_pre2,pro_pre3,pro_cant,"
                        + "pro_provee,pro_cate,pro_sect,pro_canmin,pro_venci"
                        + " From productos where pro_codigo=" + TXcODIGO.getText() + " order by pro_codigo";

                con.consulta(sql);
                rs = con.getRs();
                if (rs.next()) {
                    pro = new Productos();
                    pro.setProCodigo(rs.getInt("pro_codigo"));
                    pro.setProDescri(rs.getString("pro_descri"));
                    pro.setProPre1(rs.getBigDecimal("pro_pre1"));
                    pro.setProPre2(rs.getBigDecimal("pro_pre2"));
                    pro.setProPre3(rs.getBigDecimal("pro_pre3"));
                    pro.setProCant(rs.getBigDecimal("pro_cant"));
                    pro.setProProvee(rs.getInt("pro_provee"));
                    pro.setProCate(rs.getInt("pro_cate"));
                    pro.setProSect(rs.getInt("pro_sect"));
                    pro.setProCanmin(rs.getBigDecimal("pro_canmin"));
                    pro.setProVenci(rs.getDate("pro_venci"));

                    if (pro.getProCanmin().doubleValue() > 0) {
                        if (pro.getProCant().doubleValue() <= pro.getProCanmin().doubleValue()) {
                            JOptionPane.showMessageDialog(null, "ATENCIÓN!, producto con cantidad mínimo.");
                        }
                    }

                    TXcODIGO.setText(pro.getProCodigo().toString());
                    txDescri.setText(pro.getProDescri());
                    txPrecio1.setText(pro.getProPre2().toString());
                    txPrecio2.setText(pro.getProPre3().toString());
                    if (txCodCli.getText().equals("0")) {
                        txPrecio.setText(df.format(pro.getProPre3()));
                    } else if (scli.getCli_lispre() == 0) {
                        txPrecio.setText(df.format(pro.getProPre3()));
                    } else {
                        txPrecio.setText(df.format(pro.getProPre2()));
                    }
                    txCan.setText(df.format(pro.getProCant()));

                    txCantidad.setText(dfCan.format(cantPro));
                    //jBAgregar.doClick();

                } else if (cbZ >= 1) {
                    sql = "Select pro_codigo,pro_descri,pro_pre1,pro_pre2,pro_pre3,pro_cant,"
                            + "pro_provee,pro_cate,pro_sect,pro_canmin,pro_venci"
                            + " From productos where pro_codigo=" + cbCP
                            + "and pro_codigo = pro_cbarra::integer order by pro_codigo";

                    con.consulta(sql);
                    rs = con.getRs();
                    if (rs.next()) {
                        pro = new Productos();
                        pro.setProCodigo(rs.getInt("pro_codigo"));
                        pro.setProDescri(rs.getString("pro_descri"));
                        pro.setProPre1(rs.getBigDecimal("pro_pre1"));
                        pro.setProPre2(rs.getBigDecimal("pro_pre2"));
                        pro.setProPre3(rs.getBigDecimal("pro_pre3"));
                        pro.setProCant(rs.getBigDecimal("pro_cant"));
                        pro.setProProvee(rs.getInt("pro_provee"));
                        pro.setProCate(rs.getInt("pro_cate"));
                        pro.setProSect(rs.getInt("pro_sect"));
                        pro.setProCanmin(rs.getBigDecimal("pro_canmin"));
                        pro.setProVenci(rs.getDate("pro_venci"));

                        if (pro.getProCanmin().doubleValue() > 0) {
                            if (pro.getProCant().doubleValue() <= pro.getProCanmin().doubleValue()) {
                                JOptionPane.showMessageDialog(null, "ATENCIÓN!, producto con cantidad mínimo.");
                            }
                        }

                        cantPro = (double) cbMont / rs.getDouble("pro_pre3");

                        TXcODIGO.setText(pro.getProCodigo().toString());
                        txDescri.setText(pro.getProDescri());
                        txPrecio1.setText(pro.getProPre2().toString());
                        txPrecio2.setText(pro.getProPre3().toString());
                        if (txCodCli.getText().equals("0")) {
                            txPrecio.setText(df.format(pro.getProPre3()));
                        } else if (scli.getCli_lispre() == 0) {
                            txPrecio.setText(df.format(pro.getProPre3()));
                        } else {
                            txPrecio.setText(df.format(pro.getProPre2()));
                        }
                        txCan.setText(df.format(pro.getProCant()));

                        txCantidad.setText(dfCan.format(cantPro));
                        // jBAgregar.doClick();
                    }
                }
            }
            con.close();
        } catch (SQLException | HeadlessException e) {
            if (con.getCon() != null) {
                con.close();
            }
        }
    }

    private void reImprimir() {
        if (tipfac == 1) {
            archi = this.getClass().getResource("/reports/fac_ticket_comun.jasper");
            try {
                imprimir(codvent);
            } catch (ParseException ex) {
                Logger.getLogger(Ventas_restaurant.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void limpiar() {
        TXcODIGO.setText("");
        txDescri.setText("");
        txPrecio1.setText("");
        txPrecio2.setText("");
        txPrecio.setText("");
        txCan.setText("");
        txCantidad.setText("");
        txTotal.setText("");
        txCodMesa.setText("");
        txDesMesa.setText("");
        txNumVent.setText("");
        mesa = null;

        txCodMesa.grabFocus();

        modelo.setRowCount(0);
        TablaVentas.setModel(modelo);

        jlDeuda.setVisible(false);
        jtxMonDeu.setVisible(false);
    }

    private void consulta() {
        try {
            Coneccion con = new Coneccion();
            String sql = "Select emp_codigo,emp_nombre,emp_descri,emp_direc,emp_tele,"
                    + "emp_ruc,emp_timbrado,emp_facvalidez,emp_numfac1,emp_numfac2,"
                    + "emp_numfac3,emp_utilidad,emp_desmay,emp_cantick,emp_cantickleg from empresa";
            con.consulta(sql);
            ResultSet rs;
            rs = con.getRs();
            if (rs.next()) {
                emp = new Empresa();
                emp.setEmp_codigo(rs.getInt("emp_codigo"));
                emp.setEmp_nombre(rs.getString("emp_nombre"));
                emp.setEmp_descri(rs.getString("emp_descri"));
                emp.setEmp_direc(rs.getString("emp_direc"));
                emp.setEmp_tele(rs.getString("emp_tele"));
                emp.setEmp_ruc(rs.getString("emp_ruc"));
                emp.setEmp_timbrado(rs.getInt("emp_timbrado"));
                emp.setEmp_facvalidez(rs.getDate("emp_facvalidez"));
                emp.setEmp_numfac1(rs.getInt("emp_numfac1"));
                emp.setEmp_numfac2(rs.getInt("emp_numfac2"));
                emp.setEmp_numfac3(rs.getInt("emp_numfac3"));
                emp.setEmp_utilidad(rs.getDouble("emp_utilidad"));
                emp.setEmp_descuem(rs.getDouble("emp_desmay"));
                emp.setEmp_cantick(rs.getInt("emp_cantick"));
                emp.setEmp_cantickleg(rs.getInt("emp_cantickleg"));
            }
            con.close();
        } catch (SQLException e) {

        }
    }

    private void findByIdMesa(int codigo) {

        Coneccion con = new Coneccion();

        try {
            con.setRs(con.getStmt().executeQuery("Select * from mesa  where m_codigo=" + codigo));

            if (con.getRs().next()) {
                Mesa mesa = new Mesa();
                mesa.setM_codigo(con.getRs().getInt("m_codigo"));
                mesa.setM_descri(con.getRs().getString("m_descri"));
                mesa.setM_estado(con.getRs().getBoolean("m_estatus"));

                txDesMesa.setText(mesa.getM_descri());
            }
        } catch (Exception e) {

        }
    }

    private void RegPreVenta() {
        int tipven;
        deucli deuc = new deucli();
        try {
            Saldo = 0.0;
            Entrega = df.parse(txTotal.getText()).doubleValue();
            tipven = 0;
            codvent = 0;
            String Hora = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
            Cfecha = Calendar.getInstance();
            fecha = sdf.format(Cfecha.getTime());
            Venta ven = new Venta();
            ven.setVen_cliente(Integer.parseInt(txCodCli.getText()));
            ven.setVen_fecha(sdf.parse(fecha));
            ven.setVen_hora(Hora);
            ven.setVen_codven(usu.getAcc_id());
            ven.setVen_total(Entrega);
            ven.setTipven(0);
            ven.setVen_saldo(Saldo);
            ven.setVen_estado(false);
            ven.setVen_mesa(Integer.parseInt(txCodMesa.getText()));

            ArrayList<ItemVen> lisItenVen = new ArrayList<>();
            double descuento = 0;
            if (modelo.getRowCount() > 0) {
                for (int i = 0; i < modelo.getRowCount(); i++) {
                    ItemVen itv = new ItemVen();
                    itv.setItv_codven(codvent);
                    itv.setItv_codpro(Integer.parseInt(TablaVentas.getValueAt(i, 0).toString()));
                    //System.out.println("Itv canti " + Double.parseDouble(TablaVentas.getValueAt(i, 2).toString()));
                    itv.setItv_canti(Double.parseDouble(TablaVentas.getValueAt(i, 2).toString()));
                    itv.setItv_precio(Double.parseDouble(TablaVentas.getValueAt(i, 3).toString()));
                    descuento = descuento + df.parse(TablaVentas.getValueAt(i, 5).toString()).doubleValue();
                    lisItenVen.add(itv);
                }
            }

            ven.setItemven(lisItenVen);
            ven.setVen_descuento(descuento);

            coneccion = new Coneccion();
            con = coneccion.getCon();
            Statement stmt;
            ResultSet rs;
            con.setAutoCommit(false);
            stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

            String sql;
            sql = "Insert into ventas(ven_fecha,ven_hora,ven_codven,ven_total,"
                    + "ven_cliente,ven_tipo,ven_numfac,ven_efectivo,ven_vuelto,ven_descuento,ven_totlet,ven_mesa,ven_estado) values('"
                    + ven.getVen_fecha() + "','"
                    + ven.getVen_hora() + "',"
                    + ven.getVen_codven() + ","
                    + ven.getVen_total() + ","
                    + ven.getVen_cliente() + ","
                    + ven.getTipven() + ",'"
                    + ven.getNunfac() + "',"
                    + ven.getVen_efectivo() + ","
                    + ven.getVen_vuelto() + ","
                    + ven.getVen_descuento() + ",'"
                    + ven.getVen_totlet() + "',"
                    + ven.getVen_mesa() + ","
                    + ven.isVen_estado() + ")";

            stmt.executeUpdate(sql);

            rs = stmt.executeQuery("SELECT last_value from ventas_ven_codigo_seq");

            if (rs.next()) {
                codvent = rs.getInt(1);
                txNumVent.setText(String.valueOf(codvent));

                stmt.executeUpdate("update mesa set m_estatus= " + 0
                        + "where m_codigo=" + Integer.parseInt(txCodMesa.getText()));
            }

            ArrayList<ItemVen> lisItem = ven.getItemven();
            for (int i = 0; i < lisItem.size(); i++) {
                ItemVen itv = lisItem.get(i);
                itv.setItv_codven(codvent);
                sql = "Insert into item_ventas( itv_codven,itv_codpro,itv_canti,itv_precio) values("
                        + itv.getItv_codven() + ","
                        + itv.getItv_codpro() + ","
                        + itv.getItv_canti() + ","
                        + itv.getItv_precio()
                        + ")";

                stmt.executeUpdate(sql);

                stmt.executeUpdate("update productos set pro_cant= " + "(pro_cant - " + itv.getItv_canti() + ") "
                        + "where pro_codigo=" + itv.getItv_codpro());

            }

            con.commit();
            con.close();

            limpiar();

        } catch (ParseException ex) {
            Logger.getLogger(Ventas_restaurant.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Ventas_restaurant.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void consultarVenta(int codMesa) {
        try {
            Coneccion con = new Coneccion();
            ResultSet rs;
            String sql = "select ven_codigo,ven_fecha,ven_hora,ven_codven,acc_nombre,itv_codpro,pro_descri,pro_iva, "
                    + "itv_canti,itv_precio,ven_total,ven_cliente,case when cli_nombre is null then 'Ocacional' else  "
                    + "cli_nombre end,cli_ruc ,ven_tipo,ven_obs,(itv_canti*itv_precio) as stot, "
                    + "ven_numfac, itv_codigo "
                    + "from ventas left join clientes cli on cli.cli_codigo = ventas.ven_cliente,item_ventas,productos,acceso "
                    + "where ven_situ=1 and pro_codigo=itv_codpro and ven_codigo=itv_codven "
                    + "and acc_id=ven_codven and ven_mesa=" + codMesa;
            con.consulta(sql);
            rs = con.getRs();
            while (rs.next()) {
                
                if(ventas == null){
                    ventas = new Venta();
                }

                if (itemvenList == null) {
                    itemvenList = new ArrayList<>();
                }else{
                    itemvenList.clear();
                }
                
                ItemVen itemven = new ItemVen();
                itemven.setItv_codigo(rs.getInt("itv_codigo"));
                itemven.setItv_codpro(rs.getInt("itv_codpro"));
                itemven.setItv_codven(rs.getInt("ven_codigo"));
                itemven.setItv_canti(rs.getDouble("itv_canti"));
                itemven.setItv_precio(rs.getDouble("itv_precio"));
                
                itemvenList.add(itemven);
                
                ventas.setVen_codigo(rs.getInt("ven_codigo"));
                
                ventas.setVen_cliente(rs.getInt("ven_cliente"));
                ventas.setVen_fecha(rs.getDate("ven_fecha"));
                ventas.setVen_hora(rs.getString("ven_hora"));
                ventas.setVen_codven(rs.getInt("ven_codven"));
                ventas.setVen_total(rs.getDouble("ven_total"));
                ventas.setNunfac(rs.getString("ven_numfac"));
                ventas.setVen_mesa(Integer.parseInt(txCodMesa.getText()));
                

                txCodCli.setText(String.valueOf(rs.getInt("ven_cliente")));
                txDesCli.setText(rs.getString("cli_nombre"));
                Object[] pro = new Object[modelo.getColumnCount()];
                pro[0] = rs.getInt("itv_codpro");
                pro[1] = rs.getString("pro_descri");
                pro[2] = df.format(rs.getDouble("itv_canti"));
                pro[3] = df.format(rs.getDouble("itv_precio"));

                double total = (rs.getDouble("itv_precio") * rs.getDouble("itv_canti"));
                pro[4] = df.format(total);
                pro[5] = df.format(0);
                modelo.addRow(pro);
                txTotal.setText(df.format(rs.getDouble("ven_total")));

                txNumVent.setText(String.valueOf(rs.getInt("ven_codigo")));

            }

            this.TablaVentas.setModel(modelo);
            con.close();
        } catch (Exception e) {
            System.out.println("frames.Ventas_restaurant.consultarVenta()" + e.getMessage());
        }

    }

    private void updatePreVenta() {
        deucli deuc = new deucli();
        try {
            Saldo = 0.0;
            Entrega = df.parse(txTotal.getText()).doubleValue();
            codvent = 0;
            String Hora = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
            Cfecha = Calendar.getInstance();
            fecha = sdf.format(Cfecha.getTime());
            

            ventas.setVen_cliente(Integer.parseInt(txCodCli.getText()));
            ventas.setVen_fecha(sdf.parse(fecha));
            ventas.setVen_hora(Hora);
            ventas.setVen_codven(usu.getAcc_id());
            ventas.setVen_total(Entrega);
            ventas.setTipven(0);
            ventas.setVen_saldo(Saldo);
            ventas.setVen_estado(false);
            

           double descuento = 0;
            if (modelo.getRowCount() > 0) {
                for (int i = 0; i < modelo.getRowCount(); i++) {
                    descuento = descuento + df.parse(TablaVentas.getValueAt(i, 5).toString()).doubleValue();
               
                }
            }

            ventas.setItemven(itemvenList);
            ventas.setVen_descuento(descuento);

            coneccion = new Coneccion();
            con = coneccion.getCon();
            Statement stmt;
            ResultSet rs;
            con.setAutoCommit(false);
            stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

            String sql;
            sql = "Update ventas set ven_fecha = '" + ventas.getVen_fecha() + "', "
                    + "ven_hora = '" + ventas.getVen_hora() + "', "
                    + "ven_codven = " + ventas.getVen_codven() + ", "
                    + "ven_total = " + ventas.getVen_total() + ", "
                    + "ven_cliente = " + ventas.getVen_cliente() + ", "
                    + "ven_tipo= " + ventas.getTipven() + ","
                    + "ven_numfac= '" + ventas.getNunfac() + "', "
                    + "ven_efectivo= " + ventas.getVen_efectivo() + ","
                    + "ven_vuelto= " + ventas.getVen_vuelto() + ", "
                    + "ven_descuento= " + ventas.getVen_descuento() + ", "
                    + "ven_totlet= '" + ventas.getVen_totlet() + "' ,"
                    + "ven_estado= " + ventas.isVen_estado() + " "
                    + "where ven_codigo =" + ventas.getVen_codigo();

            stmt.executeUpdate(sql);
            

            ArrayList<ItemVen> lisItem = ventas.getItemven();
            for (int i = 0; i < lisItem.size(); i++) {
                ItemVen itv = lisItem.get(i);
                itv.setItv_codven(ventas.getVen_codigo());
                //System.out.println("Cantidad - > "+itv.getItv_canti());
                double cantidadAnterior = 0;
                
                if(itv.getItv_codigo() != null && itv.getItv_codigo() > 0){
                    sql = "Select itv_canti from item_ventas where itv_codigo="+itv.getItv_codigo();
                    
                    rs = stmt.executeQuery(sql);
                    
                    if(rs.next()){
                        cantidadAnterior = rs.getDouble("itv_canti");
                    }
                    
                    sql = "update item_ventas set itv_canti="+itv.getItv_canti()
                            + " where itv_codigo = "+itv.getItv_codigo();
                }else{
                    sql = "Insert into item_ventas( itv_codven,itv_codpro,itv_canti,itv_precio) values("
                        + itv.getItv_codven() + ","
                        + itv.getItv_codpro() + ","
                        + itv.getItv_canti() + ","
                        + itv.getItv_precio()
                        + ")";
                }
       
                stmt.executeUpdate(sql);
                
                //System.out.println(itv.getItv_codpro()+"-"+itv.getItv_canti());
                //System.out.println(cantidadAnterior);
                stmt.executeUpdate("update productos set pro_cant= " + "(pro_cant - " + (itv.getItv_canti() - cantidadAnterior) + ") "
                        + "where pro_codigo=" + itv.getItv_codpro());

            }

            con.commit();
            con.close();

            limpiar();

        } catch (ParseException ex) {
            Logger.getLogger(Ventas_restaurant.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Ventas_restaurant.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TXcODIGO;
    private javax.swing.JTable TablaVentas;
    private javax.swing.ButtonGroup bGTipos;
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btnConti;
    private javax.swing.JButton btreimp;
    private javax.swing.JButton jBAgregar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRBContado;
    private javax.swing.JRadioButton jRBCredito;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlDeuda;
    private javax.swing.JTextField jtxMonDeu;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField txCan;
    private javax.swing.JTextField txCantidad;
    private javax.swing.JTextField txCodCli;
    private javax.swing.JTextField txCodMesa;
    private javax.swing.JTextField txCodUsu;
    private javax.swing.JTextField txDesCli;
    private javax.swing.JTextField txDesMesa;
    private javax.swing.JTextField txDescri;
    private javax.swing.JTextField txDesusu;
    private javax.swing.JTextField txFecha;
    private javax.swing.JTextField txNumVent;
    private javax.swing.JTextField txPrecio;
    private javax.swing.JTextField txPrecio1;
    private javax.swing.JTextField txPrecio2;
    private javax.swing.JTextField txTotal;
    // End of variables declaration//GEN-END:variables
}
