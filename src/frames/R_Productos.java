/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import Entity.Productos;
import Connection.Coneccion;
import Connection.resizeImg;
import Decoder.BASE64Decoder;
import Decoder.BASE64Encoder;
import Entity.Categoria;
import Entity.Proveedor;
import Entity.Sector;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Melanio
 */
public class R_Productos extends javax.swing.JInternalFrame {

    /**
     * Creates new form R_Productos
     */
    String ruta, nombre, foto;
    Image img = null;
    BufferedImage bimage;
    byte[] imageInByte = null;
    ArrayList<Productos> aPro;
    DefaultTableModel modelo;
    DecimalFormat df = new DecimalFormat("###,###,###.##");
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    resizeImg rImg = new resizeImg();

    ArrayList<Proveedor> Lprovee = new ArrayList<>();
    ArrayList<Categoria> Lcate = new ArrayList<>();
    ArrayList<Sector> Lsect = new ArrayList<>();

    TableRowSorter<TableModel> sorter;
    int numrow = 0;
    double utilidad = 0;
    double desmay = 0;

    public R_Productos() {
        this.aPro = new ArrayList<>();
        initComponents();

        txtBusqueda.getDocument().addDocumentListener(
                new DocumentListener() {
                    @Override
                    public void changedUpdate(DocumentEvent e) {
                        filtrar();
                    }

                    @Override
                    public void insertUpdate(DocumentEvent e) {
                        filtrar();
                    }

                    @Override
                    public void removeUpdate(DocumentEvent e) {
                        filtrar();
                    }
                });

        TableModel();
        consultar();
        jTFechaVenci.setVisible(false);
        Calendar cal = new GregorianCalendar();
        this.jTFechaVenci.setText(sdf.format(cal.getTime()));
        lbVenci.setVisible(false);
        Disabled();

    }

    private void filtrar() {
        RowFilter<TableModel, Object> rf = null;
        int indiceColumnaTabla = 1;
        try {
            rf = RowFilter.regexFilter(txtBusqueda.getText(), indiceColumnaTabla);
        } catch (java.util.regex.PatternSyntaxException e) {
        }
        sorter.setRowFilter(rf);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        unidad = new javax.swing.ButtonGroup();
        proCantLabel3 = new javax.swing.JLabel();
        jTtipIva = new javax.swing.JTextField();
        proCantLabel1 = new javax.swing.JLabel();
        jTpORiVA = new javax.swing.JTextField();
        jTPane = new javax.swing.JTabbedPane();
        jPRP = new javax.swing.JPanel();
        btCancel = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        proDescriLabel = new javax.swing.JLabel();
        proPre1Label = new javax.swing.JLabel();
        proPre2Label = new javax.swing.JLabel();
        proPre3Label = new javax.swing.JLabel();
        proCantLabel = new javax.swing.JLabel();
        proProveeLabel = new javax.swing.JLabel();
        proCateLabel = new javax.swing.JLabel();
        proSectLabel = new javax.swing.JLabel();
        proFotoLabel = new javax.swing.JLabel();
        proCodigoField = new javax.swing.JTextField();
        proBarCode = new javax.swing.JTextField();
        proDescriField = new javax.swing.JTextField();
        proPre1Field = new javax.swing.JTextField();
        proPre2Field = new javax.swing.JTextField();
        proPre3Field = new javax.swing.JTextField();
        proCantField = new javax.swing.JTextField();
        proFotoField = new javax.swing.JTextField();
        jLImagen = new javax.swing.JLabel();
        proCantMin = new javax.swing.JTextField();
        lbVenci = new javax.swing.JLabel();
        jTFechaVenci = new javax.swing.JFormattedTextField();
        jBBusImg = new javax.swing.JButton();
        cbProveedor = new javax.swing.JComboBox();
        cbCategoria = new javax.swing.JComboBox();
        cbSector = new javax.swing.JComboBox();
        proCodigoLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        proPre1Label1 = new javax.swing.JLabel();
        proCantLabel2 = new javax.swing.JLabel();
        rbKg = new javax.swing.JRadioButton();
        rbUni = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        proPre1Label3 = new javax.swing.JLabel();
        pro_utilidad = new javax.swing.JTextField();
        proPre1Label4 = new javax.swing.JLabel();
        proPre2Label1 = new javax.swing.JLabel();
        proPre2Label2 = new javax.swing.JLabel();
        pro_desmay = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        saveButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        jPLP = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaProductos = new javax.swing.JTable();
        txtBusqueda = new javax.swing.JTextField();
        proCodigoLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Registrar Productos");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        proCantLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proCantLabel3.setText("Iva:[G]ravada/[E]xenta");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = -142;
        gridBagConstraints.ipady = -15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(proCantLabel3, gridBagConstraints);

        jTtipIva.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTtipIva.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTtipIvaFocusGained(evt);
            }
        });
        jTtipIva.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTtipIvaKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = -10;
        gridBagConstraints.ipady = -27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTtipIva, gridBagConstraints);

        proCantLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proCantLabel1.setText("% IVA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = -40;
        gridBagConstraints.ipady = -15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(proCantLabel1, gridBagConstraints);

        jTpORiVA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTpORiVA.setText("0");
        jTpORiVA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTpORiVAActionPerformed(evt);
            }
        });
        jTpORiVA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTpORiVAFocusGained(evt);
            }
        });
        jTpORiVA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTpORiVAKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = -18;
        gridBagConstraints.ipady = -27;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTpORiVA, gridBagConstraints);

        jPRP.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btCancel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_cancel.png"))); // NOI18N
        btCancel.setMnemonic('C');
        btCancel.setText("Cancelar");
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });
        jPRP.add(btCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 390, 140, 40));

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_delete.png"))); // NOI18N
        deleteButton.setMnemonic('E');
        deleteButton.setText("Eliminar");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPRP.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 390, 140, -1));

        jPanel1.setLayout(null);

        proDescriLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proDescriLabel.setText("Descripción:");
        jPanel1.add(proDescriLabel);
        proDescriLabel.setBounds(10, 40, 73, 15);

        proPre1Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proPre1Label.setText("Código de Barra:");
        jPanel1.add(proPre1Label);
        proPre1Label.setBounds(190, 10, 110, 15);

        proPre2Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proPre2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        proPre2Label.setText("Mayorista");
        jPanel1.add(proPre2Label);
        proPre2Label.setBounds(310, 130, 90, 20);

        proPre3Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proPre3Label.setText("Pre. Venta 2:");
        jPanel1.add(proPre3Label);
        proPre3Label.setBounds(10, 160, 100, 15);

        proCantLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proCantLabel.setText("Cantidad:");
        jPanel1.add(proCantLabel);
        proCantLabel.setBounds(10, 190, 90, 15);

        proProveeLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proProveeLabel.setText("Proveedor:");
        jPanel1.add(proProveeLabel);
        proProveeLabel.setBounds(10, 220, 67, 15);

        proCateLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proCateLabel.setText("Categoría:");
        jPanel1.add(proCateLabel);
        proCateLabel.setBounds(10, 250, 63, 15);

        proSectLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proSectLabel.setText("Sector:");
        jPanel1.add(proSectLabel);
        proSectLabel.setBounds(10, 280, 44, 15);

        proFotoLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proFotoLabel.setText("Imagen:");
        jPanel1.add(proFotoLabel);
        proFotoLabel.setBounds(10, 310, 50, 15);

        proCodigoField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proCodigoField.setEnabled(false);
        jPanel1.add(proCodigoField);
        proCodigoField.setBounds(60, 10, 120, 23);

        proBarCode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proBarCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proBarCodeActionPerformed(evt);
            }
        });
        proBarCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                proBarCodeFocusGained(evt);
            }
        });
        proBarCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                proBarCodeKeyPressed(evt);
            }
        });
        jPanel1.add(proBarCode);
        proBarCode.setBounds(300, 10, 340, 23);

        proDescriField.setDocument(new Entity.LetraMayuscula());
        proDescriField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proDescriField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                proDescriFieldFocusGained(evt);
            }
        });
        proDescriField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                proDescriFieldKeyPressed(evt);
            }
        });
        jPanel1.add(proDescriField);
        proDescriField.setBounds(90, 40, 630, 23);

        proPre1Field.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proPre1Field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                proPre1FieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                proPre1FieldFocusLost(evt);
            }
        });
        proPre1Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proPre1FieldActionPerformed(evt);
            }
        });
        proPre1Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                proPre1FieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                proPre1FieldKeyTyped(evt);
            }
        });
        jPanel1.add(proPre1Field);
        proPre1Field.setBounds(110, 100, 150, 23);

        proPre2Field.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proPre2Field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                proPre2FieldFocusGained(evt);
            }
        });
        proPre2Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proPre2FieldActionPerformed(evt);
            }
        });
        proPre2Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                proPre2FieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                proPre2FieldKeyTyped(evt);
            }
        });
        jPanel1.add(proPre2Field);
        proPre2Field.setBounds(110, 130, 150, 23);

        proPre3Field.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proPre3Field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                proPre3FieldFocusGained(evt);
            }
        });
        proPre3Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                proPre3FieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                proPre3FieldKeyTyped(evt);
            }
        });
        jPanel1.add(proPre3Field);
        proPre3Field.setBounds(110, 160, 150, 23);

        proCantField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proCantField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                proCantFieldFocusGained(evt);
            }
        });
        proCantField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                proCantFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                proCantFieldKeyTyped(evt);
            }
        });
        jPanel1.add(proCantField);
        proCantField.setBounds(110, 190, 120, 23);

        proFotoField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proFotoField.setEnabled(false);
        jPanel1.add(proFotoField);
        proFotoField.setBounds(70, 310, 350, 23);

        jLImagen.setBackground(new java.awt.Color(204, 204, 204));
        jLImagen.setForeground(new java.awt.Color(204, 204, 255));
        jLImagen.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(jLImagen);
        jLImagen.setBounds(460, 70, 260, 240);

        proCantMin.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proCantMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                proCantMinKeyTyped(evt);
            }
        });
        jPanel1.add(proCantMin);
        proCantMin.setBounds(90, 340, 120, 23);

        lbVenci.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbVenci.setText("Vencimiento:");
        jPanel1.add(lbVenci);
        lbVenci.setBounds(240, 340, 79, 15);

        try {
            jTFechaVenci.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jTFechaVenci.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(jTFechaVenci);
        jTFechaVenci.setBounds(320, 340, 150, 23);

        jBBusImg.setText("...");
        jBBusImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBusImgActionPerformed(evt);
            }
        });
        jPanel1.add(jBBusImg);
        jBBusImg.setBounds(420, 310, 40, 23);

        cbProveedor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbProveedor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione Proveedor" }));
        cbProveedor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbProveedorMouseClicked(evt);
            }
        });
        cbProveedor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbProveedorItemStateChanged(evt);
            }
        });
        cbProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbProveedorActionPerformed(evt);
            }
        });
        jPanel1.add(cbProveedor);
        cbProveedor.setBounds(80, 220, 171, 23);

        cbCategoria.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbCategoria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione Categoría" }));
        jPanel1.add(cbCategoria);
        cbCategoria.setBounds(80, 250, 171, 23);

        cbSector.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbSector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione Sector" }));
        jPanel1.add(cbSector);
        cbSector.setBounds(80, 280, 171, 23);

        proCodigoLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proCodigoLabel1.setText("Código:");
        jPanel1.add(proCodigoLabel1);
        proCodigoLabel1.setBounds(10, 10, 47, 15);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/mercaderia.png"))); // NOI18N
        jPanel1.add(jLabel2);
        jLabel2.setBounds(530, 70, 110, 230);

        proPre1Label1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proPre1Label1.setText("Unidad de Medida :");
        jPanel1.add(proPre1Label1);
        proPre1Label1.setBounds(10, 70, 130, 15);

        proCantLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proCantLabel2.setText("Can. Mínimo:");
        jPanel1.add(proCantLabel2);
        proCantLabel2.setBounds(10, 340, 79, 15);

        unidad.add(rbKg);
        rbKg.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        rbKg.setText("Kg");
        rbKg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rbKgKeyPressed(evt);
            }
        });
        jPanel1.add(rbKg);
        rbKg.setBounds(210, 70, 93, 23);

        unidad.add(rbUni);
        rbUni.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        rbUni.setSelected(true);
        rbUni.setText("Unidad");
        rbUni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rbUniKeyPressed(evt);
            }
        });
        jPanel1.add(rbUni);
        rbUni.setBounds(140, 70, 93, 23);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/baskets64.png"))); // NOI18N
        jPanel1.add(jLabel3);
        jLabel3.setBounds(560, 310, 80, 53);

        proPre1Label3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proPre1Label3.setText("Precio Costo:");
        jPanel1.add(proPre1Label3);
        proPre1Label3.setBounds(10, 100, 100, 15);

        pro_utilidad.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        pro_utilidad.setText("0");
        pro_utilidad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pro_utilidadFocusGained(evt);
            }
        });
        pro_utilidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pro_utilidadKeyTyped(evt);
            }
        });
        jPanel1.add(pro_utilidad);
        pro_utilidad.setBounds(310, 90, 80, 23);

        proPre1Label4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proPre1Label4.setText("% utilidad");
        jPanel1.add(proPre1Label4);
        proPre1Label4.setBounds(310, 70, 81, 15);

        proPre2Label1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proPre2Label1.setText("Pre. Venta 1:");
        jPanel1.add(proPre2Label1);
        proPre2Label1.setBounds(10, 130, 100, 15);

        proPre2Label2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proPre2Label2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        proPre2Label2.setText("% Descuento");
        jPanel1.add(proPre2Label2);
        proPre2Label2.setBounds(310, 120, 90, 15);

        pro_desmay.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        pro_desmay.setText("0");
        pro_desmay.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pro_desmayFocusGained(evt);
            }
        });
        pro_desmay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pro_desmayKeyTyped(evt);
            }
        });
        jPanel1.add(pro_desmay);
        pro_desmay.setBounds(310, 150, 80, 23);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator1);
        jSeparator1.setBounds(270, 70, 2, 230);

        jPRP.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 730, 370));

        saveButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_save.png"))); // NOI18N
        saveButton.setMnemonic('G');
        saveButton.setText("Guardar");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jPRP.add(saveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 390, 130, 40));

        refreshButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_modificar.png"))); // NOI18N
        refreshButton.setMnemonic('A');
        refreshButton.setText("Actualizar");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        jPRP.add(refreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 390, 140, -1));

        newButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        newButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_nuevo.png"))); // NOI18N
        newButton.setMnemonic('N');
        newButton.setText("Nuevo");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        jPRP.add(newButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 120, -1));

        jTPane.addTab("Reg. Productos", jPRP);

        jPLP.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TablaProductos.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        TablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Código", "Descripción", "Precio Costo", "Precio May", "Precio Min", "Cant.", "Cant. Mini"
            }
        ));
        TablaProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaProductos);
        if (TablaProductos.getColumnModel().getColumnCount() > 0) {
            TablaProductos.getColumnModel().getColumn(0).setMinWidth(30);
            TablaProductos.getColumnModel().getColumn(1).setMinWidth(250);
        }

        jPLP.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 720, 390));

        txtBusqueda.setDocument(new Entity.LetraMayuscula());
        txtBusqueda.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyPressed(evt);
            }
        });
        jPLP.add(txtBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 490, 30));

        proCodigoLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proCodigoLabel.setText("Filtrar:");
        jPLP.add(proCodigoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 30));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/lupa64.png"))); // NOI18N
        jPLP.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 30, 30));

        jTPane.addTab("Lista de Productos", jPLP);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTPane, gridBagConstraints);

        setBounds(0, 0, 775, 524);
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (validar()) {
            Productos producto = new Productos();

            producto.setProDescri(this.proDescriField.getText());
            producto.setProPre1(BigDecimal.valueOf(Double.parseDouble(proPre1Field.getText())));
            producto.setProPre2(BigDecimal.valueOf(Double.parseDouble(proPre2Field.getText())));
            producto.setProPre3(BigDecimal.valueOf(Double.parseDouble(proPre3Field.getText())));
            producto.setProCant(BigDecimal.valueOf(Double.parseDouble(proCantField.getText())));

            producto.setProUtilidad(Double.parseDouble(pro_utilidad.getText()));
            producto.setProDesMay(Double.parseDouble(pro_desmay.getText()));

            if (Lcate.size() > 0) {
                Categoria categoria = Lcate.get(cbCategoria.getSelectedIndex());
                producto.setProCate(categoria.getCate_codigo());
            } else {
                producto.setProCate(0);
            }
            if (Lsect.size() > 0) {
                Sector sector = Lsect.get(cbSector.getSelectedIndex());
                producto.setProSect(sector.getSec_codigo());
            } else {
                producto.setProSect(0);
            }
            if (Lprovee.size() > 0) {
                Proveedor proveedor = Lprovee.get(cbProveedor.getSelectedIndex());
                producto.setProProvee(proveedor.getPvee_codigo());
            } else {
                producto.setProProvee(0);
            }
            producto.setProCanmin(BigDecimal.valueOf(Double.parseDouble(proCantMin.getText())));
            try {
                producto.setProVenci(sdf.parse(jTFechaVenci.getText()));
            } catch (ParseException ex) {
                Logger.getLogger(R_Productos.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (foto != null) {
                producto.setProFoto(foto);
            }
            producto.setProCbarra(proBarCode.getText().trim());
            producto.setProTiva(jTtipIva.getText().trim());
            producto.setProIva(BigDecimal.valueOf(Double.parseDouble(jTpORiVA.getText())));

            if (rbUni.isSelected()) {
                producto.setProUnidad(0);
            } else {
                producto.setProUnidad(1);
            }

            String sql = "Insert into productos(pro_descri,pro_pre1,pro_pre2,pro_pre3,"
                    + "pro_cant,pro_provee,pro_cate,pro_sect,pro_canmin,pro_venci,pro_cbarra,pro_unidad,"
                    + "pro_utilidad,pro_desmay) "
                    + "values('" + producto.getProDescri() + "'," + producto.getProPre1() + ","
                    + producto.getProPre2() + "," + producto.getProPre3() + "," + producto.getProCant() + ","
                    + producto.getProProvee() + "," + producto.getProCate() + "," + producto.getProSect() + ","
                    + producto.getProCanmin() + ",'" + sdf.format(producto.getProVenci()) + "','" + producto.getProCbarra() + "',"
                    +producto.getProUnidad()+","+ producto.getProUtilidad() + "," + producto.getProDesMay() + ")";

            Coneccion con = new Coneccion();
            ResultSet rs;
            int codpro;
            try {
                int res = con.update(sql);
                if (res == 1) {
                    con.consulta("SELECT last_value from productos_pro_codigo_seq");
                    rs = con.getRs();
                    if (rs.next()) {
                        codpro = rs.getInt(1);
                        con.update("Insert into imgpro(img_procod,img_foto) "
                                + "values(" + codpro + ",'" + producto.getProFoto() + "')");
                    }
                    JOptionPane.showMessageDialog(this, "Datos Insertados con éxito");
                    consultar();
                    Limpiar();
                }
                con.close();
            } catch (SQLException | HeadlessException e) {
                if (con.getCon() != null) {
                    con.close();
                }
            }
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        try {
            Productos producto = new Productos();

            producto.setProDescri(this.proDescriField.getText());
            producto.setProPre1(BigDecimal.valueOf(Double.parseDouble(proPre1Field.getText())));
            producto.setProPre2(BigDecimal.valueOf(Double.parseDouble(proPre2Field.getText())));
            producto.setProPre3(BigDecimal.valueOf(Double.parseDouble(proPre3Field.getText())));
            producto.setProCant(BigDecimal.valueOf(Double.parseDouble(proCantField.getText())));
            producto.setProUtilidad(df.parse(pro_utilidad.getText().replace(".", ",")).doubleValue());
            producto.setProDesMay(df.parse(pro_desmay.getText().replace(".", ",")).doubleValue());

            if (Lcate.size() > 0) {
                Categoria categoria = Lcate.get(cbCategoria.getSelectedIndex());
                producto.setProCate(categoria.getCate_codigo());
            } else {
                producto.setProCate(0);
            }
            if (Lsect.size() > 0) {
                Sector sector = Lsect.get(cbSector.getSelectedIndex());
                producto.setProSect(sector.getSec_codigo());
            } else {
                producto.setProSect(0);
            }
            if (Lprovee.size() > 0) {
                Proveedor proveedor = Lprovee.get(cbProveedor.getSelectedIndex());
                producto.setProProvee(proveedor.getPvee_codigo());
            } else {
                producto.setProProvee(0);
            }

            producto.setProCanmin(BigDecimal.valueOf(Double.parseDouble(proCantMin.getText())));
            try {
                producto.setProVenci(sdf.parse(jTFechaVenci.getText()));
            } catch (ParseException ex) {
                Logger.getLogger(R_Productos.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (foto != null) {
                producto.setProFoto(foto);
            }

            producto.setProCbarra(proBarCode.getText().trim());
            producto.setProTiva(jTtipIva.getText().trim());
            producto.setProIva(BigDecimal.valueOf(Double.parseDouble(jTpORiVA.getText())));

            if (rbUni.isSelected()) {
                producto.setProUnidad(0);
            } else {
                producto.setProUnidad(1);
            }
            producto.setProUnidad(WIDTH);

            String sql = "UPDATE productos set pro_descri = '" + producto.getProDescri()
                    + "',pro_pre1=" + producto.getProPre1()
                    + ",pro_pre2=" + producto.getProPre2()
                    + ",pro_pre3=" + producto.getProPre3()
                    + ",pro_cant=" + producto.getProCant()
                    + ",pro_provee=" + producto.getProProvee()
                    + ",pro_cate=" + producto.getProCate()
                    + ",pro_sect=" + producto.getProSect()
                    + ",pro_canmin=" + producto.getProCanmin()
                    + ",pro_venci='" + sdf.format(producto.getProVenci())
                    + "',pro_cbarra='" + producto.getProCbarra()
                    + "',pro_unidad=" + producto.getProUnidad()
                    + ",pro_utilidad=" + producto.getProUtilidad()
                    + ",pro_desmay=" + producto.getProDesMay()
                    + " WHERE pro_codigo = " + proCodigoField.getText();

            Coneccion con = new Coneccion();
            try {
                int res = con.update(sql);
                if (res == 1) {
                    JOptionPane.showMessageDialog(this, "Datos Actualizados con éxito");
                    consultar();
                    Limpiar();
                }
                con.close();
            } catch (Exception e) {
                if (con.getCon() != null) {
                    con.close();
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(R_Productos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed

        Limpiar();
        Enabled();
        newButton.setEnabled(false);
        deleteButton.setEnabled(false);
        refreshButton.setEnabled(false);
        saveButton.setEnabled(true);
        proBarCode.grabFocus();

    }//GEN-LAST:event_newButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        Coneccion con = new Coneccion();
        try {
            int res = con.update("DELETE FROM productos where pro_codigo=" + proCodigoField.getText());
            if (res == 1) {
                JOptionPane.showMessageDialog(this, "Producto Eliminados");
                consultar();
                Limpiar();
            }
            con.close();
        } catch (Exception e) {
            if (con.getCon() != null) {
                con.close();
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void TablaProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaProductosMouseClicked
        Editar();
        Enabled();
        this.jTPane.setSelectedIndex(0);
    }//GEN-LAST:event_TablaProductosMouseClicked

    private void proPre1FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proPre1FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_proPre1FieldActionPerformed

    private void proPre1FieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proPre1FieldKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && proPre1Field.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_proPre1FieldKeyTyped

    private void proPre2FieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proPre2FieldKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && proPre1Field.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_proPre2FieldKeyTyped

    private void proPre3FieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proPre3FieldKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && proPre1Field.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_proPre3FieldKeyTyped

    private void proCantFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proCantFieldKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && proPre1Field.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_proCantFieldKeyTyped

    private void proCantMinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proCantMinKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && proPre1Field.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_proCantMinKeyTyped

    private void jBBusImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBusImgActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivo de Imagen", "jpg"));
        fileChooser.setCurrentDirectory(new java.io.File("e:/imagenes_tmp/"));
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            //obtiene ruta y nombre del archivo
            ruta = fileChooser.getSelectedFile().getAbsolutePath();
            nombre = fileChooser.getSelectedFile().getName();
            this.proFotoField.setText(nombre);
        }

        //System.out.println(ruta);
        if (ruta != null) {
            try {
                img = ImageIO.read(new File(ruta));
            } catch (IOException ex) {
                Logger.getLogger(R_Productos.class.getName()).log(Level.SEVERE, null, ex);
            }

            double alto = img.getHeight(null) / Math.ceil(img.getHeight(null) / 240f);
            double ancho = img.getWidth(null) / Math.ceil(img.getWidth(null) / 320f);
            Icon icon = new ImageIcon(img.getScaledInstance((int) ancho, (int) alto, Image.SCALE_AREA_AVERAGING));
            this.jLImagen.setText("");
            this.jLImagen.setIcon(icon);
            Image img1 = img.getScaledInstance((int) ancho, (int) alto, Image.SCALE_AREA_AVERAGING);

            try {
                bimage = ImageIO.read(new File(ruta));

                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(bimage, "jpg", baos);
                baos.flush();
                imageInByte = baos.toByteArray();

                byte[] rIm = rImg.scale(imageInByte, 320, 240);

                BASE64Encoder e = new BASE64Encoder();
                foto = e.encodeBuffer(rIm);

                baos.close();

            } catch (Exception e) {
                System.out.println("Error al covertir " + e.getMessage());
            }
        }
    }//GEN-LAST:event_jBBusImgActionPerformed

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        Limpiar();
    }//GEN-LAST:event_btCancelActionPerformed

    private void proBarCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proBarCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_proBarCodeActionPerformed

    private void jTpORiVAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTpORiVAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTpORiVAActionPerformed

    private void jTtipIvaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTtipIvaKeyTyped
        char c = evt.getKeyChar();
        // System.out.println(c);
        if (c == 'E' || c == 'e') {
            jTpORiVA.setText("0");
            jTpORiVA.grabFocus();
        } else {
            if (c == 'G' || c == 'g') {
                jTpORiVA.setText("10");
                jTpORiVA.grabFocus();
            } else {
                evt.consume();
            }
        }

        if (jTtipIva.getText().length() >= 1) {
            getToolkit().beep();
            evt.consume();
        }

    }//GEN-LAST:event_jTtipIvaKeyTyped

    private void jTpORiVAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTpORiVAFocusGained
        jTtipIva.setText(jTtipIva.getText().toUpperCase());
    }//GEN-LAST:event_jTpORiVAFocusGained

    private void jTtipIvaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTtipIvaFocusGained
        jTtipIva.selectAll();
    }//GEN-LAST:event_jTtipIvaFocusGained

    private void jTpORiVAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTpORiVAKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && proPre1Field.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_jTpORiVAKeyTyped

    private void proPre1FieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_proPre1FieldFocusGained
        proPre1Field.selectAll();
    }//GEN-LAST:event_proPre1FieldFocusGained

    private void proPre2FieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_proPre2FieldFocusGained
        proPre2Field.selectAll();
    }//GEN-LAST:event_proPre2FieldFocusGained

    private void proPre3FieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_proPre3FieldFocusGained
        proPre3Field.selectAll();
    }//GEN-LAST:event_proPre3FieldFocusGained

    private void proCantFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_proCantFieldFocusGained
        proCantField.selectAll();
    }//GEN-LAST:event_proCantFieldFocusGained

    private void proBarCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_proBarCodeFocusGained
        proBarCode.selectAll();
    }//GEN-LAST:event_proBarCodeFocusGained

    private void proBarCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proBarCodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            proDescriField.grabFocus();
        }
    }//GEN-LAST:event_proBarCodeKeyPressed

    private void proDescriFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proDescriFieldKeyPressed
        if (evt.getKeyCode()
                == KeyEvent.VK_ENTER) {
            rbUni.grabFocus();
        }
    }//GEN-LAST:event_proDescriFieldKeyPressed

    private void proPre1FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proPre1FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            proPre2Field.requestFocus();
        }
    }//GEN-LAST:event_proPre1FieldKeyPressed

    private void proPre2FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proPre2FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            proPre3Field.grabFocus();
        }
    }//GEN-LAST:event_proPre2FieldKeyPressed

    private void proPre3FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proPre3FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            proCantField.grabFocus();
        }
    }//GEN-LAST:event_proPre3FieldKeyPressed

    private void proCantFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proCantFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            proCantMin.grabFocus();
        }
    }//GEN-LAST:event_proCantFieldKeyPressed

    private void txtBusquedaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyPressed

    }//GEN-LAST:event_txtBusquedaKeyPressed

    private void proDescriFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_proDescriFieldFocusGained

    }//GEN-LAST:event_proDescriFieldFocusGained

    private void rbUniKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rbUniKeyPressed
        if (evt.getKeyCode()
                == KeyEvent.VK_ENTER) {
            proPre1Field.grabFocus();
        }
    }//GEN-LAST:event_rbUniKeyPressed

    private void rbKgKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rbKgKeyPressed
        if (evt.getKeyCode()
                == KeyEvent.VK_ENTER) {
            rbKg.setSelected(true);
            proPre1Field.grabFocus();
        }
    }//GEN-LAST:event_rbKgKeyPressed

    private void cbProveedorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbProveedorItemStateChanged

    }//GEN-LAST:event_cbProveedorItemStateChanged

    private void cbProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbProveedorActionPerformed

    }//GEN-LAST:event_cbProveedorActionPerformed

    private void cbProveedorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbProveedorMouseClicked
        consultarSelect();
    }//GEN-LAST:event_cbProveedorMouseClicked

    private void pro_utilidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pro_utilidadKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && pro_utilidad.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_pro_utilidadKeyTyped

    private void pro_desmayKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pro_desmayKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && pro_desmay.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_pro_desmayKeyTyped

    private void pro_utilidadFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pro_utilidadFocusGained
        pro_utilidad.selectAll();
    }//GEN-LAST:event_pro_utilidadFocusGained

    private void pro_desmayFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pro_desmayFocusGained
        pro_desmay.selectAll();
    }//GEN-LAST:event_pro_desmayFocusGained

    private void proPre1FieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_proPre1FieldFocusLost
        double tUtili;
        double tDescu;
        if (!proPre1Field.getText().isEmpty() && !proPre1Field.getText().equals("0")) {
            double preCos = Double.parseDouble(proPre1Field.getText());
            tUtili = Double.parseDouble(pro_utilidad.getText());
            tDescu = Double.parseDouble(pro_desmay.getText());
            if(tUtili > 0){
            double SumUtili = (preCos + ((preCos * tUtili) / 100));
            this.proPre3Field.setText(String.valueOf(SumUtili));
            this.proPre2Field.setText(String.valueOf((SumUtili - ((SumUtili * tDescu) / 100))));
            }

        }

    }//GEN-LAST:event_proPre1FieldFocusLost

    private void proPre2FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proPre2FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_proPre2FieldActionPerformed

    private void consultar() {
        String sql = "Select pro_codigo,pro_descri,pro_pre1,pro_pre2,pro_pre3,pro_cant,"
                + "pro_provee,pro_cate,pro_sect,pro_canmin,pro_venci,pro_cbarra,pro_unidad,pro_utilidad,pro_desmay "
                + " From productos order by pro_codigo";

        Coneccion con = new Coneccion();
        ResultSet rs;
        Productos p;
        aPro.clear();
        modelo.setNumRows(0);
        numrow = 0;

        try {
            con.consulta(sql);
            rs = con.getRs();
            while (rs.next()) {
                p = new Productos();
                p.setProCodigo(rs.getInt("pro_codigo"));
                p.setProDescri(rs.getString("pro_descri"));
                p.setProPre1(rs.getBigDecimal("pro_pre1"));
                p.setProPre2(rs.getBigDecimal("pro_pre2"));
                p.setProPre3(rs.getBigDecimal("pro_pre3"));
                p.setProCant(rs.getBigDecimal("pro_cant"));
                p.setProProvee(rs.getInt("pro_provee"));
                p.setProCate(rs.getInt("pro_cate"));
                p.setProSect(rs.getInt("pro_sect"));
                p.setProCanmin(rs.getBigDecimal("pro_canmin"));
                p.setProVenci(rs.getDate("pro_venci"));
                p.setProCbarra(rs.getString("pro_cbarra"));
                p.setProUnidad(rs.getInt("pro_unidad"));
                p.setProUtilidad(rs.getDouble("pro_utilidad"));
                p.setProDesMay(rs.getDouble("pro_desmay"));
                aPro.add(p);
                numrow++;
            }

            if (aPro.size() > 0) {
                CargarTabla();
            }

            sql = "select * from proveedor order by  pvee_codigo";
            con.consulta(sql);
            rs = con.getRs();
            Lprovee.clear();
            while (rs.next()) {
                Proveedor pr = new Proveedor();
                pr.setPvee_codigo(rs.getInt(1));
                pr.setPvee_descri(rs.getString(2));
                Lprovee.add(pr);
            }
            if (Lprovee.size() > 0) {
                cbProveedor.removeAllItems();
                for (Proveedor Lprovee1 : Lprovee) {
                    cbProveedor.addItem(Lprovee1.getPvee_descri());
                }
            }

            sql = "select * from categoria order by  cate_codigo";
            con.consulta(sql);
            rs = con.getRs();
            Lcate.clear();
            while (rs.next()) {
                Categoria ca = new Categoria();
                ca.setCate_codigo(rs.getInt(1));
                ca.setCate_descri(rs.getString(2));
                Lcate.add(ca);
            }
            if (Lcate.size() > 0) {
                cbCategoria.removeAllItems();
                for (Categoria Lcate1 : Lcate) {
                    cbCategoria.addItem(Lcate1.getCate_descri());
                }
            }

            sql = "select * from sector order by  sec_codigo";
            con.consulta(sql);
            rs = con.getRs();
            Lsect.clear();
            while (rs.next()) {
                Sector se = new Sector();
                se.setSec_codigo(rs.getInt(1));
                se.setSec_descri(rs.getString(2));
                Lsect.add(se);
            }
            if (Lsect.size() > 0) {
                cbSector.removeAllItems();
                for (Sector Lsect1 : Lsect) {
                    cbSector.addItem(Lsect1.getSec_descri());
                }
            }

            sql = "select emp_utilidad,emp_desmay from empresa";
            con.consulta(sql);
            rs = con.getRs();
            if (rs.next()) {
                utilidad = rs.getDouble(1);
                desmay = rs.getDouble(2);

                this.pro_utilidad.setText(df.format(utilidad));
                this.pro_desmay.setText(df.format(desmay));
            } else {
            }

            con.close();
        } catch (Exception e) {
            if (con.getCon() != null) {
                con.close();
            }
        }
    }

    private void consultarImagen(int procod) {
        String sql = "Select img_procod,img_foto From imgpro where img_procod=" + procod;
        Coneccion con = new Coneccion();
        ResultSet rs;
        try {
            con.consulta(sql);
            rs = con.getRs();
            if (rs.next()) {
                BASE64Decoder d = new BASE64Decoder();
                //System.out.println(pro.getProFoto());
                foto = rs.getString("pro_foto");
                byte[] datosImagen = d.decodeBuffer(foto);
                img = rImg.ConvertirImagen(datosImagen);
                Icon ico = new ImageIcon(img);
                jLImagen.setText("");
                jLImagen.setIcon(ico);
            } else {
                jLImagen.setText("");
                jLImagen.setIcon(null);
            }

            con.close();
        } catch (SQLException | IOException e) {
            if (con.getCon() != null) {
                con.close();
            }
            jLImagen.setText("");
            jLImagen.setIcon(null);
        }
    }

    public void CargarTabla() {
        modelo.setNumRows(0);
        this.TablaProductos.setModel(modelo);
        for (Productos p : aPro) {
            //System.out.print(p.toString());
            Object[] pro = new Object[modelo.getColumnCount()];
            pro[0] = p.getProCodigo();
            pro[1] = p.getProDescri();
            pro[2] = p.getProPre1();
            pro[3] = p.getProPre2();
            pro[4] = p.getProPre3();
            pro[5] = p.getProCant();
            pro[6] = p.getProCanmin();

            modelo.addRow(pro);
        }

        sorter = new TableRowSorter<TableModel>(modelo);
        TablaProductos.setRowSorter(sorter);
        TablaProductos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    public void Editar() {
        deleteButton.setEnabled(true);
        refreshButton.setEnabled(true);

        saveButton.setEnabled(false);
        newButton.setEnabled(false);

        int filasele = TablaProductos.getSelectedRow();

        int xx = Integer.parseInt(TablaProductos.getValueAt(filasele, 0).toString());
        Productos pro = new Productos();
        for (Productos aPro1 : aPro) {
            pro = aPro1;
            if (pro.getProCodigo() == xx) {
                //System.out.println("Codigo seleccionado "+pro.toString());
                break;
            }
        }
        //Productos pro = aPro.get(filasele);
        //System.out.println(aPro.get(filasele).toString());

        proCodigoField.setText(String.valueOf(pro.getProCodigo()));
        proDescriField.setText(pro.getProDescri());
        proPre1Field.setText(pro.getProPre1().toString());
        proPre2Field.setText(pro.getProPre2().toString());
        proPre3Field.setText(pro.getProPre3().toString());
        proCantField.setText(pro.getProCant().toString());

        for (int i = 0; i < Lprovee.size(); i++) {
            Proveedor p = Lprovee.get(i);
            if (p.getPvee_codigo() == pro.getProProvee()) {
                cbProveedor.setSelectedIndex(i);
            }
        }

        for (int i = 0; i < Lcate.size(); i++) {
            Categoria c = Lcate.get(i);
            if (c.getCate_codigo() == pro.getProCate()) {
                cbCategoria.setSelectedIndex(i);
            }
        }

        for (int i = 0; i < Lsect.size(); i++) {
            Sector p = Lsect.get(i);
            if (p.getSec_codigo() == pro.getProSect()) {
                cbSector.setSelectedIndex(i);
            }
        }

        consultarImagen(xx);

        proCantMin.setText(pro.getProCanmin().toString());
        this.jTFechaVenci.setText(sdf.format(pro.getProVenci()));
        proBarCode.setText(pro.getProCbarra());

        if (pro.getProUnidad() == 0) {
            rbUni.setSelected(true);
            rbKg.setSelected(false);
        } else {
            rbUni.setSelected(false);
            rbKg.setSelected(true);
        }

        if (pro.getProUtilidad() != null) {
            this.pro_utilidad.setText(df.format(pro.getProUtilidad()));
            this.pro_desmay.setText(df.format(pro.getProDesMay()));
        }

        //jTextField1.setText(jTable1.getValueAt(filasele, 0).toString());
    }

    private void TableModel() {
        modelo = (DefaultTableModel) TablaProductos.getModel();
        modelo.setRowCount(0);
        this.TablaProductos.setModel(modelo);
    }

    public void Enabled() {
        //proCodigoField.setEnabled(true);
        proDescriField.setEnabled(true);
        proPre1Field.setEnabled(true);
        proPre2Field.setEnabled(true);
        proPre3Field.setEnabled(true);
        proCantField.setEnabled(true);
        cbProveedor.setEnabled(true);
        cbCategoria.setEnabled(true);
        cbSector.setEnabled(true);
        jLImagen.setEnabled(true);
        proCantMin.setEnabled(true);
        jTFechaVenci.setEnabled(true);
        jTtipIva.setEnabled(true);
        jTpORiVA.setEnabled(true);
        proBarCode.setEnabled(true);
        pro_utilidad.setEnabled(true);
        pro_desmay.setEnabled(true);
    }

    private void Disabled() {
        proCodigoField.setEnabled(false);
        proDescriField.setEnabled(false);
        proPre1Field.setEnabled(false);
        proPre2Field.setEnabled(false);
        proPre3Field.setEnabled(false);
        proCantField.setEnabled(false);
        cbProveedor.setEnabled(false);
        cbCategoria.setEnabled(false);
        cbSector.setEnabled(false);
        jLImagen.setEnabled(false);
        proCantMin.setEnabled(false);
        jTFechaVenci.setEnabled(false);
        jTtipIva.setEnabled(false);
        jTpORiVA.setEnabled(false);
        proBarCode.setEnabled(false);
        pro_utilidad.setEnabled(false);
        pro_desmay.setEnabled(false);
    }

    public boolean validar() {
        try {
            if (proDescriField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Campo Descripción no puede estar vacío");
                proDescriField.grabFocus();
                return false;
            } else {
                if (proPre1Field.getText().isEmpty() || proPre2Field.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Campo Precio de Costo o Precio de venta 1 \n no puede estar vacío");
                    proPre1Field.grabFocus();
                    return false;
                } else {
                    double preCos = df.parse(proPre1Field.getText()).floatValue();
                    double preVen = df.parse(proPre2Field.getText()).floatValue();
                    if (preCos > preVen) {
                        JOptionPane.showMessageDialog(null, "Precio de Costo no puede ser Mayor al precio de Venta");
                        proPre1Field.grabFocus();
                        return false;
                    } else {
                        if (proCantField.getText().isEmpty()) {
                            /*JOptionPane.showMessageDialog(null, "Campo Cantidad no puede estar vacío");
                             proCantField.grabFocus();
                             return false;*/
                            proCantField.setText("0");
                            proCantMin.setText("0");
                            return true;
                        } else {
                            if (proCantMin.getText().isEmpty()) {
                                proCantMin.setText("0");
                                return true;
                            }
                        }
                    }
                }
            }
            return true;
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Error al Validar datos " + e.getMessage());
            return false;
        }
    }

    public int uv() {
        String sql = "SELECT last_value from productos_pro_codigo_seq";
        Coneccion con = new Coneccion();
        int uv = 0;
        try {
            con.consulta(sql);
            if (con.getRs().next()) {
                if (numrow == 0) {
                    uv = con.getRs().getInt(1);
                } else {
                    uv = con.getRs().getInt(1) + 1;
                }
            }
            con.close();
        } catch (Exception e) {
            if (con.getCon() != null) {
                con.close();
            }
        }
        return uv;
    }

    public void Limpiar() {

        proCodigoField.setText(String.valueOf(uv()));
        deleteButton.setEnabled(false);
        refreshButton.setEnabled(false);
        saveButton.setEnabled(false);

        newButton.setEnabled(true);
        proDescriField.setText("");
        proPre1Field.setText("");
        proPre2Field.setText("");
        proPre3Field.setText("");
        proCantField.setText("");
        if (cbProveedor.getItemCount() > 0) {
            cbProveedor.setSelectedIndex(0);
        }
        if (cbCategoria.getItemCount() > 0) {
            cbCategoria.setSelectedIndex(0);
        }
        if (cbSector.getItemCount() > 0) {
            cbSector.setSelectedIndex(0);
        }

        jLImagen.setText("");
        jLImagen.setIcon(null);
        proCantMin.setText("");
        txtBusqueda.setText("");
        jTtipIva.setText("");
        jTpORiVA.setText("0");
        proBarCode.setText("");
        proBarCode.grabFocus();
        rbUni.setSelected(true);

        foto = null;
        Calendar cal = new GregorianCalendar();
        this.jTFechaVenci.setText(sdf.format(cal.getTime()));
        Disabled();
        consultar();
    }

    private void consultarSelect() {
        String sql = "";
        Coneccion con = new Coneccion();
        ResultSet rs;
        try {
            sql = "select * from proveedor order by  pvee_codigo";
            con.consulta(sql);
            rs = con.getRs();
            Lprovee.clear();
            while (rs.next()) {
                Proveedor pr = new Proveedor();
                pr.setPvee_codigo(rs.getInt(1));
                pr.setPvee_descri(rs.getString(2));
                Lprovee.add(pr);
            }
            if (Lprovee.size() > 0) {
                cbProveedor.removeAllItems();
                for (Proveedor Lprovee1 : Lprovee) {
                    cbProveedor.addItem(Lprovee1.getPvee_descri());
                }
            }

            sql = "select * from categoria order by  cate_codigo";
            con.consulta(sql);
            rs = con.getRs();
            Lcate.clear();
            while (rs.next()) {
                Categoria ca = new Categoria();
                ca.setCate_codigo(rs.getInt(1));
                ca.setCate_descri(rs.getString(2));
                Lcate.add(ca);
            }
            if (Lcate.size() > 0) {
                cbCategoria.removeAllItems();
                for (Categoria Lcate1 : Lcate) {
                    cbCategoria.addItem(Lcate1.getCate_descri());
                }
            }

            sql = "select * from sector order by  sec_codigo";
            con.consulta(sql);
            rs = con.getRs();
            Lsect.clear();
            while (rs.next()) {
                Sector se = new Sector();
                se.setSec_codigo(rs.getInt(1));
                se.setSec_descri(rs.getString(2));
                Lsect.add(se);
            }
            if (Lsect.size() > 0) {
                cbSector.removeAllItems();
                for (Sector Lsect1 : Lsect) {
                    cbSector.addItem(Lsect1.getSec_descri());
                }
            }

            con.close();
        } catch (Exception e) {
            if (con.getCon() != null) {
                con.close();
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaProductos;
    private javax.swing.JButton btCancel;
    private javax.swing.JComboBox cbCategoria;
    private javax.swing.JComboBox cbProveedor;
    private javax.swing.JComboBox cbSector;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton jBBusImg;
    private javax.swing.JLabel jLImagen;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPLP;
    private javax.swing.JPanel jPRP;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JFormattedTextField jTFechaVenci;
    private javax.swing.JTabbedPane jTPane;
    private javax.swing.JTextField jTpORiVA;
    private javax.swing.JTextField jTtipIva;
    private javax.swing.JLabel lbVenci;
    private javax.swing.JButton newButton;
    private javax.swing.JTextField proBarCode;
    private javax.swing.JTextField proCantField;
    private javax.swing.JLabel proCantLabel;
    private javax.swing.JLabel proCantLabel1;
    private javax.swing.JLabel proCantLabel2;
    private javax.swing.JLabel proCantLabel3;
    private javax.swing.JTextField proCantMin;
    private javax.swing.JLabel proCateLabel;
    private javax.swing.JTextField proCodigoField;
    private javax.swing.JLabel proCodigoLabel;
    private javax.swing.JLabel proCodigoLabel1;
    private javax.swing.JTextField proDescriField;
    private javax.swing.JLabel proDescriLabel;
    private javax.swing.JTextField proFotoField;
    private javax.swing.JLabel proFotoLabel;
    private javax.swing.JTextField proPre1Field;
    private javax.swing.JLabel proPre1Label;
    private javax.swing.JLabel proPre1Label1;
    private javax.swing.JLabel proPre1Label3;
    private javax.swing.JLabel proPre1Label4;
    private javax.swing.JTextField proPre2Field;
    private javax.swing.JLabel proPre2Label;
    private javax.swing.JLabel proPre2Label1;
    private javax.swing.JLabel proPre2Label2;
    private javax.swing.JTextField proPre3Field;
    private javax.swing.JLabel proPre3Label;
    private javax.swing.JLabel proProveeLabel;
    private javax.swing.JLabel proSectLabel;
    private javax.swing.JTextField pro_desmay;
    private javax.swing.JTextField pro_utilidad;
    private javax.swing.JRadioButton rbKg;
    private javax.swing.JRadioButton rbUni;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField txtBusqueda;
    private javax.swing.ButtonGroup unidad;
    // End of variables declaration//GEN-END:variables
}
