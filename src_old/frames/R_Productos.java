/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import Entity.LetraMayuscula;
import Entity.Productos;
import Connection.Coneccion;
import Connection.resizeImg;
import Decoder.BASE64Decoder;
import Decoder.BASE64Encoder;
import Entity.Categoria;
import Entity.Proveedor;
import Entity.Sector;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Melanio
 */
public class R_Productos extends javax.swing.JInternalFrame {

    /**
     * Creates new form R_Productos
     */
    String ruta, nombre, foto;
    Image img = null;
    BufferedImage bimage;
    byte[] imageInByte = null;
    ArrayList<Productos> aPro;
    DefaultTableModel modelo;
    DecimalFormat df = new DecimalFormat("###,###,###.##");
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    resizeImg rImg = new resizeImg();

    ArrayList<Proveedor> Lprovee = new ArrayList<>();
    ArrayList<Categoria> Lcate = new ArrayList<>();
    ArrayList<Sector> Lsect = new ArrayList<>();

    TableRowSorter<TableModel> sorter;
    int numrow = 0;

    public R_Productos() {
        this.aPro = new ArrayList<>();
        initComponents();

        txtBusqueda.getDocument().addDocumentListener(
                new DocumentListener() {
                    @Override
                    public void changedUpdate(DocumentEvent e) {
                        filtrar();
                    }

                    @Override
                    public void insertUpdate(DocumentEvent e) {
                        filtrar();
                    }

                    @Override
                    public void removeUpdate(DocumentEvent e) {
                        filtrar();
                    }
                });

        TableModel();
        consultar();
        jTFechaVenci.setVisible(false);
        Calendar cal = new GregorianCalendar();
        this.jTFechaVenci.setText(sdf.format(cal.getTime()));
        lbVenci.setVisible(false);
        Disabled();

    }

    private void filtrar() {
        RowFilter<TableModel, Object> rf = null;
        int indiceColumnaTabla = 1;
        try {
            rf = RowFilter.regexFilter(txtBusqueda.getText(), indiceColumnaTabla);
        } catch (java.util.regex.PatternSyntaxException e) {
        }
        sorter.setRowFilter(rf);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TablaProductos = new javax.swing.JTable();
        saveButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        proDescriLabel = new javax.swing.JLabel();
        proPre1Label = new javax.swing.JLabel();
        proPre2Label = new javax.swing.JLabel();
        proPre3Label = new javax.swing.JLabel();
        proCantLabel = new javax.swing.JLabel();
        proProveeLabel = new javax.swing.JLabel();
        proCateLabel = new javax.swing.JLabel();
        proSectLabel = new javax.swing.JLabel();
        proFotoLabel = new javax.swing.JLabel();
        proCodigoField = new javax.swing.JTextField();
        proBarCode = new javax.swing.JTextField();
        proDescriField = new javax.swing.JTextField();
        proPre1Field = new javax.swing.JTextField();
        proPre2Field = new javax.swing.JTextField();
        proPre3Field = new javax.swing.JTextField();
        proCantField = new javax.swing.JTextField();
        proFotoField = new javax.swing.JTextField();
        proCantMin = new javax.swing.JTextField();
        lbVenci = new javax.swing.JLabel();
        jLImagen = new javax.swing.JLabel();
        jTFechaVenci = new javax.swing.JFormattedTextField();
        jBBusImg = new javax.swing.JButton();
        cbProveedor = new javax.swing.JComboBox();
        cbCategoria = new javax.swing.JComboBox();
        cbSector = new javax.swing.JComboBox();
        proCodigoLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        proPre1Label1 = new javax.swing.JLabel();
        proCantLabel2 = new javax.swing.JLabel();
        btCancel = new javax.swing.JButton();
        txtBusqueda = new javax.swing.JTextField();
        proCodigoLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        proCantLabel3 = new javax.swing.JLabel();
        jTtipIva = new javax.swing.JTextField();
        proCantLabel1 = new javax.swing.JLabel();
        jTpORiVA = new javax.swing.JTextField();

        setClosable(true);
        setTitle("Registrar Productos");
        getContentPane().setLayout(null);

        TablaProductos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        TablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "C贸digo", "Descripci贸n", "Precio Costo", "Precio Venta 1", "Precio Venta 2", "Cantidad", "Can. Mini"
            }
        ));
        TablaProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaProductos);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 60, 780, 90);

        saveButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_save.png"))); // NOI18N
        saveButton.setMnemonic('G');
        saveButton.setText("Guardar");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        getContentPane().add(saveButton);
        saveButton.setBounds(480, 583, 130, 40);

        refreshButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_modificar.png"))); // NOI18N
        refreshButton.setMnemonic('A');
        refreshButton.setText("Actualizar");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        getContentPane().add(refreshButton);
        refreshButton.setBounds(330, 583, 140, 41);

        newButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        newButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_nuevo.png"))); // NOI18N
        newButton.setMnemonic('N');
        newButton.setText("Nuevo");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        getContentPane().add(newButton);
        newButton.setBounds(50, 583, 120, 41);

        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_delete.png"))); // NOI18N
        deleteButton.setMnemonic('E');
        deleteButton.setText("Eliminar");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(deleteButton);
        deleteButton.setBounds(180, 583, 140, 41);

        jPanel1.setLayout(null);

        proDescriLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proDescriLabel.setText("Descripci贸n:");
        jPanel1.add(proDescriLabel);
        proDescriLabel.setBounds(10, 80, 73, 15);

        proPre1Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proPre1Label.setText("C贸digo de Barra:");
        jPanel1.add(proPre1Label);
        proPre1Label.setBounds(10, 50, 110, 15);

        proPre2Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proPre2Label.setText("Pre. Venta 1:");
        jPanel1.add(proPre2Label);
        proPre2Label.setBounds(10, 140, 80, 15);

        proPre3Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proPre3Label.setText("Pre. Venta 2:");
        jPanel1.add(proPre3Label);
        proPre3Label.setBounds(10, 170, 80, 15);

        proCantLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proCantLabel.setText("Cantidad:");
        jPanel1.add(proCantLabel);
        proCantLabel.setBounds(10, 200, 59, 15);

        proProveeLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proProveeLabel.setText("Proveedor:");
        jPanel1.add(proProveeLabel);
        proProveeLabel.setBounds(10, 240, 67, 15);

        proCateLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proCateLabel.setText("Categor铆a:");
        jPanel1.add(proCateLabel);
        proCateLabel.setBounds(10, 270, 63, 15);

        proSectLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proSectLabel.setText("Sector:");
        jPanel1.add(proSectLabel);
        proSectLabel.setBounds(10, 300, 44, 15);

        proFotoLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proFotoLabel.setText("Imagen:");
        jPanel1.add(proFotoLabel);
        proFotoLabel.setBounds(10, 340, 50, 15);

        proCodigoField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proCodigoField.setEnabled(false);
        jPanel1.add(proCodigoField);
        proCodigoField.setBounds(90, 10, 120, 30);

        proBarCode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proBarCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proBarCodeActionPerformed(evt);
            }
        });
        proBarCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                proBarCodeFocusGained(evt);
            }
        });
        proBarCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                proBarCodeKeyPressed(evt);
            }
        });
        jPanel1.add(proBarCode);
        proBarCode.setBounds(120, 50, 340, 30);

        proDescriField.setDocument(new LetraMayuscula());
        proDescriField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proDescriField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                proDescriFieldFocusGained(evt);
            }
        });
        proDescriField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                proDescriFieldKeyPressed(evt);
            }
        });
        jPanel1.add(proDescriField);
        proDescriField.setBounds(90, 80, 690, 30);

        proPre1Field.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proPre1Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proPre1FieldActionPerformed(evt);
            }
        });
        proPre1Field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                proPre1FieldFocusGained(evt);
            }
        });
        proPre1Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                proPre1FieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                proPre1FieldKeyTyped(evt);
            }
        });
        jPanel1.add(proPre1Field);
        proPre1Field.setBounds(100, 110, 150, 30);

        proPre2Field.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proPre2Field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                proPre2FieldFocusGained(evt);
            }
        });
        proPre2Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                proPre2FieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                proPre2FieldKeyTyped(evt);
            }
        });
        jPanel1.add(proPre2Field);
        proPre2Field.setBounds(100, 140, 150, 30);

        proPre3Field.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proPre3Field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                proPre3FieldFocusGained(evt);
            }
        });
        proPre3Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                proPre3FieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                proPre3FieldKeyTyped(evt);
            }
        });
        jPanel1.add(proPre3Field);
        proPre3Field.setBounds(100, 170, 150, 30);

        proCantField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proCantField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                proCantFieldFocusGained(evt);
            }
        });
        proCantField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                proCantFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                proCantFieldKeyTyped(evt);
            }
        });
        jPanel1.add(proCantField);
        proCantField.setBounds(80, 200, 120, 30);

        proFotoField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proFotoField.setEnabled(false);
        jPanel1.add(proFotoField);
        proFotoField.setBounds(70, 340, 350, 30);

        proCantMin.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proCantMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                proCantMinKeyTyped(evt);
            }
        });
        jPanel1.add(proCantMin);
        proCantMin.setBounds(90, 370, 120, 30);

        lbVenci.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbVenci.setText("Vencimiento:");
        jPanel1.add(lbVenci);
        lbVenci.setBounds(10, 400, 79, 15);

        jLImagen.setBackground(new java.awt.Color(204, 204, 204));
        jLImagen.setForeground(new java.awt.Color(204, 204, 255));
        jLImagen.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(jLImagen);
        jLImagen.setBounds(460, 120, 322, 240);

        try {
            jTFechaVenci.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jTFechaVenci.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(jTFechaVenci);
        jTFechaVenci.setBounds(90, 400, 150, 30);

        jBBusImg.setText("...");
        jBBusImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBusImgActionPerformed(evt);
            }
        });
        jPanel1.add(jBBusImg);
        jBBusImg.setBounds(420, 340, 40, 30);

        cbProveedor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbProveedor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione Proveedor" }));
        jPanel1.add(cbProveedor);
        cbProveedor.setBounds(80, 236, 171, 30);

        cbCategoria.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbCategoria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione Categor铆a" }));
        jPanel1.add(cbCategoria);
        cbCategoria.setBounds(80, 267, 171, 30);

        cbSector.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbSector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione Sector" }));
        jPanel1.add(cbSector);
        cbSector.setBounds(80, 298, 171, 30);

        proCodigoLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proCodigoLabel1.setText("C贸digo:");
        jPanel1.add(proCodigoLabel1);
        proCodigoLabel1.setBounds(10, 10, 47, 15);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/mercaderia.png"))); // NOI18N
        jPanel1.add(jLabel2);
        jLabel2.setBounds(260, 110, 200, 230);

        proPre1Label1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proPre1Label1.setText("Precio Costo:");
        jPanel1.add(proPre1Label1);
        proPre1Label1.setBounds(10, 110, 81, 15);

        proCantLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proCantLabel2.setText("Can. M铆nimo:");
        jPanel1.add(proCantLabel2);
        proCantLabel2.setBounds(10, 370, 79, 15);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 150, 790, 430);

        btCancel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_cancel.png"))); // NOI18N
        btCancel.setMnemonic('C');
        btCancel.setText("Cancelar");
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });
        getContentPane().add(btCancel);
        btCancel.setBounds(620, 583, 140, 40);

        txtBusqueda.setDocument(new LetraMayuscula());
        txtBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyPressed(evt);
            }
        });
        getContentPane().add(txtBusqueda);
        txtBusqueda.setBounds(80, 20, 490, 30);

        proCodigoLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proCodigoLabel.setText("Filtrar:");
        getContentPane().add(proCodigoLabel);
        proCodigoLabel.setBounds(10, 20, 39, 30);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/baskets64.png"))); // NOI18N
        getContentPane().add(jLabel3);
        jLabel3.setBounds(640, 0, 80, 60);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/lupa64.png"))); // NOI18N
        getContentPane().add(jLabel4);
        jLabel4.setBounds(50, 20, 30, 30);

        proCantLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proCantLabel3.setText("Iva:[G]ravada/[E]xenta");
        getContentPane().add(proCantLabel3);
        proCantLabel3.setBounds(230, 680, 150, 15);

        jTtipIva.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTtipIva.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTtipIvaFocusGained(evt);
            }
        });
        jTtipIva.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTtipIvaKeyTyped(evt);
            }
        });
        getContentPane().add(jTtipIva);
        jTtipIva.setBounds(380, 680, 40, 30);

        proCantLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        proCantLabel1.setText("% IVA");
        getContentPane().add(proCantLabel1);
        proCantLabel1.setBounds(450, 680, 50, 15);

        jTpORiVA.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTpORiVA.setText("0");
        jTpORiVA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTpORiVAActionPerformed(evt);
            }
        });
        jTpORiVA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTpORiVAFocusGained(evt);
            }
        });
        jTpORiVA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTpORiVAKeyTyped(evt);
            }
        });
        getContentPane().add(jTpORiVA);
        jTpORiVA.setBounds(500, 680, 40, 30);

        setBounds(0, 0, 830, 672);
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (validar()) {
            Productos producto = new Productos();

            producto.setProDescri(this.proDescriField.getText());
            producto.setProPre1(BigDecimal.valueOf(Double.parseDouble(proPre1Field.getText())));
            producto.setProPre2(BigDecimal.valueOf(Double.parseDouble(proPre2Field.getText())));
            producto.setProPre3(BigDecimal.valueOf(Double.parseDouble(proPre3Field.getText())));
            producto.setProCant(BigDecimal.valueOf(Double.parseDouble(proCantField.getText())));

            if (Lcate.size() > 0) {
                Categoria categoria = Lcate.get(cbCategoria.getSelectedIndex());
                producto.setProCate(categoria.getCate_codigo());
            } else {
                producto.setProCate(0);
            }
            if (Lsect.size() > 0) {
                Sector sector = Lsect.get(cbSector.getSelectedIndex());
                producto.setProSect(sector.getSec_codigo());
            } else {
                producto.setProSect(0);
            }
            if (Lprovee.size() > 0) {
                Proveedor proveedor = Lprovee.get(cbProveedor.getSelectedIndex());
                producto.setProProvee(proveedor.getPvee_codigo());
            } else {
                producto.setProProvee(0);
            }
            producto.setProCanmin(BigDecimal.valueOf(Double.parseDouble(proCantMin.getText())));
            try {
                producto.setProVenci(sdf.parse(jTFechaVenci.getText()));
            } catch (ParseException ex) {
                Logger.getLogger(R_Productos.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (foto != null) {
                producto.setProFoto(foto);
            }
            producto.setProCbarra(proBarCode.getText().trim());
            producto.setProTiva(jTtipIva.getText().trim());
            producto.setProIva(BigDecimal.valueOf(Double.parseDouble(jTpORiVA.getText())));

            String sql = "Insert into productos(pro_descri,pro_pre1,pro_pre2,pro_pre3,"
                    + "pro_cant,pro_provee,pro_cate,pro_sect,pro_canmin,pro_venci) "
                    + "values('" + producto.getProDescri() + "'," + producto.getProPre1() + ","
                    + producto.getProPre2() + "," + producto.getProPre3() + "," + producto.getProCant() + ","
                    + producto.getProProvee() + "," + producto.getProCate() + "," + producto.getProSect() + ","
                    + producto.getProCanmin() + ",'" + sdf.format(producto.getProVenci()) + "')";

            Coneccion con = new Coneccion();
            ResultSet rs;
            int codpro;
            try {
                int res = con.update(sql);
                if (res == 1) {
                    con.consulta("SELECT last_value from productos_pro_codigo_seq");
                    rs = con.getRs();
                    if (rs.next()) {
                        codpro = rs.getInt(1);
                        con.update("Insert into imgpro(img_procod,img_foto) "
                                + "values(" + codpro + ",'" + producto.getProFoto() + "')");
                    }
                    JOptionPane.showMessageDialog(this, "Datos Insertados con 茅xito");
                    consultar();
                    Limpiar();
                }
                con.close();
            } catch (SQLException | HeadlessException e) {
                if (con.getCon() != null) {
                    con.close();
                }
            }
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        Productos producto = new Productos();

        producto.setProDescri(this.proDescriField.getText());
        producto.setProPre1(BigDecimal.valueOf(Double.parseDouble(proPre1Field.getText())));
        producto.setProPre2(BigDecimal.valueOf(Double.parseDouble(proPre2Field.getText())));
        producto.setProPre3(BigDecimal.valueOf(Double.parseDouble(proPre3Field.getText())));
        producto.setProCant(BigDecimal.valueOf(Double.parseDouble(proCantField.getText())));
        if (Lcate.size() > 0) {
            Categoria categoria = Lcate.get(cbCategoria.getSelectedIndex());
            producto.setProCate(categoria.getCate_codigo());
        } else {
            producto.setProCate(0);
        }
        if (Lsect.size() > 0) {
            Sector sector = Lsect.get(cbSector.getSelectedIndex());
            producto.setProSect(sector.getSec_codigo());
        } else {
            producto.setProSect(0);
        }
        if (Lprovee.size() > 0) {
            Proveedor proveedor = Lprovee.get(cbProveedor.getSelectedIndex());
            producto.setProProvee(proveedor.getPvee_codigo());
        } else {
            producto.setProProvee(0);
        }

        producto.setProCanmin(BigDecimal.valueOf(Double.parseDouble(proCantMin.getText())));
        try {
            producto.setProVenci(sdf.parse(jTFechaVenci.getText()));
        } catch (ParseException ex) {
            Logger.getLogger(R_Productos.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (foto != null) {
            producto.setProFoto(foto);
        }

        producto.setProCbarra(proBarCode.getText().trim());
        producto.setProTiva(jTtipIva.getText().trim());
        producto.setProIva(BigDecimal.valueOf(Double.parseDouble(jTpORiVA.getText())));

        String sql = "UPDATE productos set pro_descri = '" + producto.getProDescri()
                + "',pro_pre1=" + producto.getProPre1()
                + ",pro_pre2=" + producto.getProPre2()
                + ",pro_pre3=" + producto.getProPre3()
                + ",pro_cant=" + producto.getProCant()
                + ",pro_provee=" + producto.getProProvee()
                + ",pro_cate=" + producto.getProCate()
                + ",pro_sect=" + producto.getProSect()
                + ",pro_canmin=" + producto.getProCanmin()
                + ",pro_venci='" + sdf.format(producto.getProVenci())
                + "',pro_cbarra='" + producto.getProCbarra() + "' WHERE pro_codigo = " + proCodigoField.getText();

        Coneccion con = new Coneccion();
        try {
            int res = con.update(sql);
            if (res == 1) {
                JOptionPane.showMessageDialog(this, "Datos Actualizados con 茅xito");
                consultar();
                Limpiar();
            }
            con.close();
        } catch (Exception e) {
            if (con.getCon() != null) {
                con.close();
            }
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed

        Limpiar();
        Enabled();
        newButton.setEnabled(false);
        deleteButton.setEnabled(false);
        refreshButton.setEnabled(false);
        saveButton.setEnabled(true);
        proBarCode.grabFocus();

    }//GEN-LAST:event_newButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        Coneccion con = new Coneccion();
        try {
            int res = con.update("DELETE FROM productos where pro_codigo=" + proCodigoField.getText());
            if (res == 1) {
                JOptionPane.showMessageDialog(this, "Producto Eliminados");
                consultar();
                Limpiar();
            }
            con.close();
        } catch (Exception e) {
            if (con.getCon() != null) {
                con.close();
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void TablaProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaProductosMouseClicked
        Editar();
        Enabled();
    }//GEN-LAST:event_TablaProductosMouseClicked

    private void proPre1FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proPre1FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_proPre1FieldActionPerformed

    private void proPre1FieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proPre1FieldKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && proPre1Field.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_proPre1FieldKeyTyped

    private void proPre2FieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proPre2FieldKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && proPre1Field.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_proPre2FieldKeyTyped

    private void proPre3FieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proPre3FieldKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && proPre1Field.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_proPre3FieldKeyTyped

    private void proCantFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proCantFieldKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && proPre1Field.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_proCantFieldKeyTyped

    private void proCantMinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proCantMinKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && proPre1Field.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_proCantMinKeyTyped

    private void jBBusImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBusImgActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivo de Imagen", "jpg"));
        fileChooser.setCurrentDirectory(new java.io.File("e:/imagenes_tmp/"));
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            //obtiene ruta y nombre del archivo
            ruta = fileChooser.getSelectedFile().getAbsolutePath();
            nombre = fileChooser.getSelectedFile().getName();
            this.proFotoField.setText(nombre);
        }

        //System.out.println(ruta);
        if (ruta != null) {
            try {
                img = ImageIO.read(new File(ruta));
            } catch (IOException ex) {
                Logger.getLogger(R_Productos.class.getName()).log(Level.SEVERE, null, ex);
            }

            double alto = img.getHeight(null) / Math.ceil(img.getHeight(null) / 240f);
            double ancho = img.getWidth(null) / Math.ceil(img.getWidth(null) / 320f);
            Icon icon = new ImageIcon(img.getScaledInstance((int) ancho, (int) alto, Image.SCALE_AREA_AVERAGING));
            this.jLImagen.setText("");
            this.jLImagen.setIcon(icon);
            Image img1 = img.getScaledInstance((int) ancho, (int) alto, Image.SCALE_AREA_AVERAGING);

            try {
                bimage = ImageIO.read(new File(ruta));

                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(bimage, "jpg", baos);
                baos.flush();
                imageInByte = baos.toByteArray();

                byte[] rIm = rImg.scale(imageInByte, 320, 240);

                BASE64Encoder e = new BASE64Encoder();
                foto = e.encodeBuffer(rIm);

                baos.close();

            } catch (Exception e) {
                System.out.println("Error al covertir " + e.getMessage());
            }
        }
    }//GEN-LAST:event_jBBusImgActionPerformed

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        Limpiar();
    }//GEN-LAST:event_btCancelActionPerformed

    private void proBarCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proBarCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_proBarCodeActionPerformed

    private void jTpORiVAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTpORiVAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTpORiVAActionPerformed

    private void jTtipIvaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTtipIvaKeyTyped
        char c = evt.getKeyChar();
        // System.out.println(c);
        if (c == 'E' || c == 'e') {
            jTpORiVA.setText("0");
            jTpORiVA.grabFocus();
        } else {
            if (c == 'G' || c == 'g') {
                jTpORiVA.setText("10");
                jTpORiVA.grabFocus();
            } else {
                evt.consume();
            }
        }

        if (jTtipIva.getText().length() >= 1) {
            getToolkit().beep();
            evt.consume();
        }

    }//GEN-LAST:event_jTtipIvaKeyTyped

    private void jTpORiVAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTpORiVAFocusGained
        jTtipIva.setText(jTtipIva.getText().toUpperCase());
    }//GEN-LAST:event_jTpORiVAFocusGained

    private void jTtipIvaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTtipIvaFocusGained
        jTtipIva.selectAll();
    }//GEN-LAST:event_jTtipIvaFocusGained

    private void jTpORiVAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTpORiVAKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && proPre1Field.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_jTpORiVAKeyTyped

    private void proPre1FieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_proPre1FieldFocusGained
        proPre1Field.selectAll();
    }//GEN-LAST:event_proPre1FieldFocusGained

    private void proPre2FieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_proPre2FieldFocusGained
        proPre2Field.selectAll();
    }//GEN-LAST:event_proPre2FieldFocusGained

    private void proPre3FieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_proPre3FieldFocusGained
        proPre3Field.selectAll();
    }//GEN-LAST:event_proPre3FieldFocusGained

    private void proCantFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_proCantFieldFocusGained
        proCantField.selectAll();
    }//GEN-LAST:event_proCantFieldFocusGained

    private void proBarCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_proBarCodeFocusGained
        proBarCode.selectAll();
    }//GEN-LAST:event_proBarCodeFocusGained

    private void proBarCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proBarCodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            proDescriField.grabFocus();
        }
    }//GEN-LAST:event_proBarCodeKeyPressed

    private void proDescriFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proDescriFieldKeyPressed
        if (evt.getKeyCode()
                == KeyEvent.VK_ENTER) {
            proPre1Field.grabFocus();
        }
    }//GEN-LAST:event_proDescriFieldKeyPressed

    private void proPre1FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proPre1FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            proPre2Field.requestFocus();
        }
    }//GEN-LAST:event_proPre1FieldKeyPressed

    private void proPre2FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proPre2FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            proPre3Field.grabFocus();
        }
    }//GEN-LAST:event_proPre2FieldKeyPressed

    private void proPre3FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proPre3FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            proCantField.grabFocus();
        }
    }//GEN-LAST:event_proPre3FieldKeyPressed

    private void proCantFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_proCantFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            proCantMin.grabFocus();
        }
    }//GEN-LAST:event_proCantFieldKeyPressed

    private void txtBusquedaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyPressed

    }//GEN-LAST:event_txtBusquedaKeyPressed

    private void proDescriFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_proDescriFieldFocusGained
       
    }//GEN-LAST:event_proDescriFieldFocusGained

    private void consultar() {
        String sql = "Select pro_codigo,pro_descri,pro_pre1,pro_pre2,pro_pre3,pro_cant,"
                + "pro_provee,pro_cate,pro_sect,pro_canmin,pro_venci,pro_cbarra"
                + " From productos order by pro_codigo";

        Coneccion con = new Coneccion();
        ResultSet rs;
        Productos p;
        aPro.clear();
        modelo.setNumRows(0);
        numrow = 0;

        try {
            con.consulta(sql);
            rs = con.getRs();
            while (rs.next()) {
                p = new Productos();
                p.setProCodigo(rs.getInt("pro_codigo"));
                p.setProDescri(rs.getString("pro_descri"));
                p.setProPre1(rs.getBigDecimal("pro_pre1"));
                p.setProPre2(rs.getBigDecimal("pro_pre2"));
                p.setProPre3(rs.getBigDecimal("pro_pre3"));
                p.setProCant(rs.getBigDecimal("pro_cant"));
                p.setProProvee(rs.getInt("pro_provee"));
                p.setProCate(rs.getInt("pro_cate"));
                p.setProSect(rs.getInt("pro_sect"));
                p.setProCanmin(rs.getBigDecimal("pro_canmin"));
                p.setProVenci(rs.getDate("pro_venci"));
                p.setProCbarra(rs.getString("pro_cbarra"));
                aPro.add(p);
                numrow++;
            }

            if (aPro.size() > 0) {
                CargarTabla();
            }

            sql = "select * from proveedor order by  pvee_codigo";
            con.consulta(sql);
            rs = con.getRs();
            Lprovee.clear();
            while (rs.next()) {
                Proveedor pr = new Proveedor();
                pr.setPvee_codigo(rs.getInt(1));
                pr.setPvee_descri(rs.getString(2));
                Lprovee.add(pr);
            }
            if (Lprovee.size() > 0) {
                cbProveedor.removeAllItems();
                for (Proveedor Lprovee1 : Lprovee) {
                    cbProveedor.addItem(Lprovee1.getPvee_descri());
                }
            }

            sql = "select * from categoria order by  cate_codigo";
            con.consulta(sql);
            rs = con.getRs();
            Lcate.clear();
            while (rs.next()) {
                Categoria ca = new Categoria();
                ca.setCate_codigo(rs.getInt(1));
                ca.setCate_descri(rs.getString(2));
                Lcate.add(ca);
            }
            if (Lcate.size() > 0) {
                cbCategoria.removeAllItems();
                for (Categoria Lcate1 : Lcate) {
                    cbCategoria.addItem(Lcate1.getCate_descri());
                }
            }

            sql = "select * from sector order by  sec_codigo";
            con.consulta(sql);
            rs = con.getRs();
            Lsect.clear();
            while (rs.next()) {
                Sector se = new Sector();
                se.setSec_codigo(rs.getInt(1));
                se.setSec_descri(rs.getString(2));
                Lsect.add(se);
            }
            if (Lsect.size() > 0) {
                cbSector.removeAllItems();
                for (Sector Lsect1 : Lsect) {
                    cbSector.addItem(Lsect1.getSec_descri());
                }
            }

            con.close();
        } catch (Exception e) {
            if (con.getCon() != null) {
                con.close();
            }
        }
    }

    private void consultarImagen(int procod) {
        String sql = "Select img_procod,img_foto From imgpro where img_procod=" + procod;
        Coneccion con = new Coneccion();
        ResultSet rs;
        try {
            con.consulta(sql);
            rs = con.getRs();
            if (rs.next()) {
                BASE64Decoder d = new BASE64Decoder();
                //System.out.println(pro.getProFoto());
                foto = rs.getString("pro_foto");
                byte[] datosImagen = d.decodeBuffer(foto);
                img = rImg.ConvertirImagen(datosImagen);
                Icon ico = new ImageIcon(img);
                jLImagen.setText("");
                jLImagen.setIcon(ico);
            } else {
                jLImagen.setText("");
                jLImagen.setIcon(null);
            }

            con.close();
        } catch (SQLException | IOException e) {
            if (con.getCon() != null) {
                con.close();
            }
            jLImagen.setText("");
            jLImagen.setIcon(null);
        }
    }

    public void CargarTabla() {
        modelo.setNumRows(0);
        this.TablaProductos.setModel(modelo);
        for (Productos p : aPro) {
            System.out.print(p.toString());
            Object[] pro = new Object[modelo.getColumnCount()];
            pro[0] = p.getProCodigo();
            pro[1] = p.getProDescri();
            pro[2] = p.getProPre1();
            pro[3] = p.getProPre2();
            pro[4] = p.getProPre3();
            pro[5] = p.getProCant();
            pro[6] = p.getProCanmin();

            modelo.addRow(pro);
        }

        sorter = new TableRowSorter<TableModel>(modelo);
        TablaProductos.setRowSorter(sorter);
        TablaProductos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    public void Editar() {
        deleteButton.setEnabled(true);
        refreshButton.setEnabled(true);

        saveButton.setEnabled(false);
        newButton.setEnabled(false);

        int filasele = TablaProductos.getSelectedRow();

        int xx = Integer.parseInt(TablaProductos.getValueAt(filasele, 0).toString());
        Productos pro = new Productos();
        for (Productos aPro1 : aPro) {
            pro = aPro1;
            if (pro.getProCodigo() == xx) {
                //System.out.println("Codigo seleccionado "+pro.toString());
                break;
            }
        }
        //Productos pro = aPro.get(filasele);
        //System.out.println(aPro.get(filasele).toString());

        proCodigoField.setText(String.valueOf(pro.getProCodigo()));
        proDescriField.setText(pro.getProDescri());
        proPre1Field.setText(pro.getProPre1().toString());
        proPre2Field.setText(pro.getProPre2().toString());
        proPre3Field.setText(pro.getProPre3().toString());
        proCantField.setText(pro.getProCant().toString());

        for (int i = 0; i < Lprovee.size(); i++) {
            Proveedor p = Lprovee.get(i);
            if (p.getPvee_codigo() == pro.getProProvee()) {
                cbProveedor.setSelectedIndex(i);
            }
        }

        for (int i = 0; i < Lcate.size(); i++) {
            Categoria c = Lcate.get(i);
            if (c.getCate_codigo() == pro.getProCate()) {
                cbCategoria.setSelectedIndex(i);
            }
        }

        for (int i = 0; i < Lsect.size(); i++) {
            Sector p = Lsect.get(i);
            if (p.getSec_codigo() == pro.getProSect()) {
                cbSector.setSelectedIndex(i);
            }
        }

        consultarImagen(xx);

        proCantMin.setText(pro.getProCanmin().toString());
        this.jTFechaVenci.setText(sdf.format(pro.getProVenci()));
        proBarCode.setText(pro.getProCbarra());

        //jTextField1.setText(jTable1.getValueAt(filasele, 0).toString());
    }

    private void TableModel() {
        modelo = (DefaultTableModel) TablaProductos.getModel();
        modelo.setRowCount(0);
        this.TablaProductos.setModel(modelo);
    }

    public void Enabled() {
        //proCodigoField.setEnabled(true);
        proDescriField.setEnabled(true);
        proPre1Field.setEnabled(true);
        proPre2Field.setEnabled(true);
        proPre3Field.setEnabled(true);
        proCantField.setEnabled(true);
        cbProveedor.setEnabled(true);
        cbCategoria.setEnabled(true);
        cbSector.setEnabled(true);
        jLImagen.setEnabled(true);
        proCantMin.setEnabled(true);
        jTFechaVenci.setEnabled(true);
        jTtipIva.setEnabled(true);
        jTpORiVA.setEnabled(true);
        proBarCode.setEnabled(true);
    }

    private void Disabled() {
        proCodigoField.setEnabled(false);
        proDescriField.setEnabled(false);
        proPre1Field.setEnabled(false);
        proPre2Field.setEnabled(false);
        proPre3Field.setEnabled(false);
        proCantField.setEnabled(false);
        cbProveedor.setEnabled(false);
        cbCategoria.setEnabled(false);
        cbSector.setEnabled(false);
        jLImagen.setEnabled(false);
        proCantMin.setEnabled(false);
        jTFechaVenci.setEnabled(false);
        jTtipIva.setEnabled(false);
        jTpORiVA.setEnabled(false);
        proBarCode.setEnabled(false);
    }

    public boolean validar() {
        try {
            if (proDescriField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Campo Descripci贸n no puede estar vac铆o");
                proDescriField.grabFocus();
                return false;
            } else {
                if (proPre1Field.getText().isEmpty() || proPre2Field.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Campo Precio de Costo o Precio de venta 1 \n no puede estar vac铆o");
                    proPre1Field.grabFocus();
                    return false;
                } else {
                    double preCos = df.parse(proPre1Field.getText()).floatValue();
                    double preVen = df.parse(proPre2Field.getText()).floatValue();
                    if (preCos > preVen) {
                        JOptionPane.showMessageDialog(null, "Precio de Costo no puede ser Mayor al precio de Venta");
                        proPre1Field.grabFocus();
                        return false;
                    } else {
                        if (proCantField.getText().isEmpty()) {
                            /*JOptionPane.showMessageDialog(null, "Campo Cantidad no puede estar vac铆o");
                             proCantField.grabFocus();
                             return false;*/
                            proCantField.setText("0");
                            proCantMin.setText("0");
                            return true;
                        } else {
                            if (proCantMin.getText().isEmpty()) {
                                proCantMin.setText("0");
                                return true;
                            }
                        }
                    }
                }
            }
            return true;
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Error al Validar datos " + e.getMessage());
            return false;
        }
    }

    public int uv() {
        String sql = "SELECT last_value from productos_pro_codigo_seq";
        Coneccion con = new Coneccion();
        int uv = 0;
        try {
            con.consulta(sql);
            if (con.getRs().next()) {
                if (numrow == 0) {
                    uv = con.getRs().getInt(1);
                } else {
                    uv = con.getRs().getInt(1) + 1;
                }
            }
            con.close();
        } catch (Exception e) {
            if (con.getCon() != null) {
                con.close();
            }
        }
        return uv;
    }

    public void Limpiar() {

        proCodigoField.setText(String.valueOf(uv()));
        deleteButton.setEnabled(false);
        refreshButton.setEnabled(false);
        saveButton.setEnabled(false);

        newButton.setEnabled(true);
        proDescriField.setText("");
        proPre1Field.setText("");
        proPre2Field.setText("");
        proPre3Field.setText("");
        proCantField.setText("");
        if (cbProveedor.getItemCount() > 0) {
            cbProveedor.setSelectedIndex(0);
        }
        if (cbCategoria.getItemCount() > 0) {
            cbCategoria.setSelectedIndex(0);
        }
        if (cbSector.getItemCount() > 0) {
            cbSector.setSelectedIndex(0);
        }

        jLImagen.setText("");
        jLImagen.setIcon(null);
        proCantMin.setText("");
        txtBusqueda.setText("");
        jTtipIva.setText("");
        jTpORiVA.setText("0");
        proBarCode.setText("");
        proBarCode.grabFocus();
        foto = null;
        Calendar cal = new GregorianCalendar();
        this.jTFechaVenci.setText(sdf.format(cal.getTime()));
        Disabled();
        consultar();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaProductos;
    private javax.swing.JButton btCancel;
    private javax.swing.JComboBox cbCategoria;
    private javax.swing.JComboBox cbProveedor;
    private javax.swing.JComboBox cbSector;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton jBBusImg;
    private javax.swing.JLabel jLImagen;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField jTFechaVenci;
    private javax.swing.JTextField jTpORiVA;
    private javax.swing.JTextField jTtipIva;
    private javax.swing.JLabel lbVenci;
    private javax.swing.JButton newButton;
    private javax.swing.JTextField proBarCode;
    private javax.swing.JTextField proCantField;
    private javax.swing.JLabel proCantLabel;
    private javax.swing.JLabel proCantLabel1;
    private javax.swing.JLabel proCantLabel2;
    private javax.swing.JLabel proCantLabel3;
    private javax.swing.JTextField proCantMin;
    private javax.swing.JLabel proCateLabel;
    private javax.swing.JTextField proCodigoField;
    private javax.swing.JLabel proCodigoLabel;
    private javax.swing.JLabel proCodigoLabel1;
    private javax.swing.JTextField proDescriField;
    private javax.swing.JLabel proDescriLabel;
    private javax.swing.JTextField proFotoField;
    private javax.swing.JLabel proFotoLabel;
    private javax.swing.JTextField proPre1Field;
    private javax.swing.JLabel proPre1Label;
    private javax.swing.JLabel proPre1Label1;
    private javax.swing.JTextField proPre2Field;
    private javax.swing.JLabel proPre2Label;
    private javax.swing.JTextField proPre3Field;
    private javax.swing.JLabel proPre3Label;
    private javax.swing.JLabel proProveeLabel;
    private javax.swing.JLabel proSectLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField txtBusqueda;
    // End of variables declaration//GEN-END:variables
}
