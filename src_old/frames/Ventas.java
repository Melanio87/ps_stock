/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import Connection.Coneccion;
import Entity.Clientes;
import Entity.Comunicador;
import Entity.ItemVen;
import Entity.MyIcon;
import Entity.Productos;
import Entity.Usuario;
import Entity.Venta;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;

/**
 *
 * @author Melanio
 */
public class Ventas extends javax.swing.JInternalFrame {

    /**
     * Creates new form Ventas
     */
    DefaultTableModel modelo;
    Productos pro = new Productos();
    TableRowSorter<TableModel> sorter;
    DecimalFormat df = new DecimalFormat("###,###,###.##");
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    Clientes clie = new Clientes();
    public Usuario usu = (Usuario) Comunicador.getObjeto();

    Calendar Cfecha = new GregorianCalendar();
    String fecha = "";

    double Saldo = 0.0;
    double Entrega = 0.0;
    URL archi;
    Coneccion coneccion;
    Connection con;
    Statement stmt;

    public static ver_total vt;
    private Frame ven;

    int codvent = 0;
    int tipfac = 1;

    public Ventas() {
        initComponents();
        TableModel();
        usuario();

        jlDeuda.setVisible(false);
        jtxMonDeu.setVisible(false);
        jRBCredito.setVisible(false);
        jRBContado.setVisible(false);
        txFecha.setText(sdf.format(Cfecha.getTime()));
    }

    private void conectar() {
        try {
            coneccion = new Coneccion();
            con = coneccion.getCon();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, closable);
        }
    }

    private void usuario() {
        if (usu.getAcc_id() != null) {
            txCodUsu.setText(usu.getAcc_id().toString());
            txDesusu.setText(usu.getAcc_nombre());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bGTipos = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        txCantidad = new javax.swing.JTextField();
        txPrecio = new javax.swing.JTextField();
        txDescri = new javax.swing.JTextField();
        jBAgregar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaVentas = new javax.swing.JTable();
        TXcODIGO = new javax.swing.JTextField();
        txPrecio1 = new javax.swing.JTextField();
        txPrecio2 = new javax.swing.JTextField();
        txTotal = new javax.swing.JTextField();
        txCan = new javax.swing.JTextField();
        txCodCli = new javax.swing.JTextField();
        txDesCli = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jlDeuda = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jRBContado = new javax.swing.JRadioButton();
        jRBCredito = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jtxMonDeu = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        txCodUsu = new javax.swing.JTextField();
        txDesusu = new javax.swing.JTextField();
        btCancel = new javax.swing.JButton();
        txFecha = new javax.swing.JTextField();

        setClosable(true);
        setTitle("Registrar Ventas");
        getContentPane().setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txCantidad.setFont(new java.awt.Font("Tahoma", 1, 28)); // NOI18N
        txCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txCantidadActionPerformed(evt);
            }
        });
        txCantidad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txCantidadFocusGained(evt);
            }
        });
        txCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txCantidadKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txCantidadKeyTyped(evt);
            }
        });
        jPanel1.add(txCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 75, 110, 50));

        txPrecio.setFont(new java.awt.Font("Tahoma", 1, 28)); // NOI18N
        txPrecio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txPrecio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txPrecioFocusGained(evt);
            }
        });
        txPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txPrecioKeyTyped(evt);
            }
        });
        jPanel1.add(txPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 130, 250, 50));

        txDescri.setEditable(false);
        txDescri.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        txDescri.setFocusable(false);
        txDescri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txDescriActionPerformed(evt);
            }
        });
        jPanel1.add(txDescri, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 85, 320, 40));

        jBAgregar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jBAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_add.png"))); // NOI18N
        jBAgregar.setMnemonic('A');
        jBAgregar.setText("Agregar");
        jBAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarActionPerformed(evt);
            }
        });
        jBAgregar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBAgregarKeyPressed(evt);
            }
        });
        jPanel1.add(jBAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 131, -1, 50));

        TablaVentas.setBackground(new java.awt.Color(252, 252, 185));
        TablaVentas.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        TablaVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "CODIGO", "DESCRIPCION", "CANTIDAD", "PRECIO", "TOTAL"
            }
        ));
        TablaVentas.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        TablaVentas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TablaVentas.setRowHeight(20);
        TablaVentas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TablaVentasKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(TablaVentas);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 680, 190));

        TXcODIGO.setFont(new java.awt.Font("Tahoma", 1, 28)); // NOI18N
        TXcODIGO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXcODIGOActionPerformed(evt);
            }
        });
        TXcODIGO.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TXcODIGOFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                TXcODIGOFocusLost(evt);
            }
        });
        TXcODIGO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TXcODIGOKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TXcODIGOKeyTyped(evt);
            }
        });
        jPanel1.add(TXcODIGO, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 75, 145, 50));

        txPrecio1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        txPrecio1.setEnabled(false);
        txPrecio1.setFocusable(false);
        jPanel1.add(txPrecio1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 120, -1));

        txPrecio2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        txPrecio2.setEnabled(false);
        txPrecio2.setFocusable(false);
        jPanel1.add(txPrecio2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, 120, -1));

        txTotal.setEditable(false);
        txTotal.setBackground(new java.awt.Color(0, 102, 0));
        txTotal.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        txTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txTotal.setFocusable(false);
        jPanel1.add(txTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 400, 200, 40));

        txCan.setEditable(false);
        txCan.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        txCan.setFocusable(false);
        jPanel1.add(txCan, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 85, 70, 40));

        txCodCli.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        txCodCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txCodCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txCodCliFocusLost(evt);
            }
        });
        txCodCli.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txCodCliKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txCodCliKeyTyped(evt);
            }
        });
        jPanel1.add(txCodCli, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 120, -1));

        txDesCli.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        txDesCli.setEnabled(false);
        jPanel1.add(txDesCli, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 390, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Cantidad:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 55, 110, 20));

        jlDeuda.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlDeuda.setText("Deuda Cliente:");
        jPanel1.add(jlDeuda, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 0, -1, 20));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("F4-Producto:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 55, -1, 20));

        bGTipos.add(jRBContado);
        jRBContado.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jRBContado.setSelected(true);
        jRBContado.setText("CONTADO");
        jPanel1.add(jRBContado, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 410, -1, -1));

        bGTipos.add(jRBCredito);
        jRBCredito.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jRBCredito.setText("CREDITO");
        jRBCredito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBCreditoActionPerformed(evt);
            }
        });
        jPanel1.add(jRBCredito, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 410, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("F4-Cliente:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, -1, 20));

        jtxMonDeu.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jtxMonDeu.setEnabled(false);
        jtxMonDeu.setFocusable(false);
        jPanel1.add(jtxMonDeu, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 20, 140, 30));

        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 30, 720, 460);

        saveButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_save.png"))); // NOI18N
        saveButton.setMnemonic('g');
        saveButton.setText("Guardar");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        getContentPane().add(saveButton);
        saveButton.setBounds(210, 500, 130, 40);

        txCodUsu.setEnabled(false);
        getContentPane().add(txCodUsu);
        txCodUsu.setBounds(10, 0, 160, 28);

        txDesusu.setEnabled(false);
        getContentPane().add(txDesusu);
        txDesusu.setBounds(180, 0, 450, 28);

        btCancel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ico_cancel.png"))); // NOI18N
        btCancel.setMnemonic('c');
        btCancel.setText("Cancelar");
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });
        getContentPane().add(btCancel);
        btCancel.setBounds(390, 500, 140, 40);

        txFecha.setEditable(false);
        txFecha.setFocusable(false);
        getContentPane().add(txFecha);
        txFecha.setBounds(640, 0, 90, 28);

        setBounds(0, 0, 757, 588);
    }// </editor-fold>//GEN-END:initComponents

    private void jBAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarActionPerformed
        if (!txCantidad.getText().isEmpty() && !txPrecio.getText().isEmpty()) {
            try {
                double ct = df.parse(txCantidad.getText()).doubleValue();
                double cd = df.parse(txCan.getText().toString()).doubleValue();
                if (ct > cd) {
                    int o = JOptionPane.showConfirmDialog(this, "Cantidad de item supera la "
                            + "cantidad de producto disponible.\n"
                            + "Deseas continuar.?", "Aviso", JOptionPane.YES_NO_OPTION);
                    System.out.println(o);
                    if (o == 0) {
                        CargarTabla();

                        TXcODIGO.setText("");
                        txDescri.setText("");
                        txPrecio1.setText("");
                        txPrecio2.setText("");
                        txPrecio.setText("");
                        txCan.setText("");
                        txCantidad.setText("");

                        TXcODIGO.grabFocus();
                    } else {
                        txCantidad.grabFocus();
                    }
                } else {
                    CargarTabla();

                    TXcODIGO.setText("");
                    txDescri.setText("");
                    txPrecio1.setText("");
                    txPrecio2.setText("");
                    txPrecio.setText("");
                    txCan.setText("");
                    txCantidad.setText("");

                    TXcODIGO.grabFocus();
                }

            } catch (ParseException | HeadlessException e) {
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_jBAgregarActionPerformed

    private void TXcODIGOKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXcODIGOKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F4) {
            ver_Produ vpro = new ver_Produ(null, true);

            vpro.setVisible(true);
            pro = vpro.vPro;

            TXcODIGO.setText(pro.getProCodigo().toString());
            txDescri.setText(pro.getProDescri().trim());
            txPrecio1.setText(pro.getProPre2().toString());
            txPrecio2.setText(pro.getProPre3().toString());
            txPrecio.setText(pro.getProPre3().toString());
        } else {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                if (TXcODIGO.getText().isEmpty()) {
                    ver_Produ vpro = new ver_Produ(null, true);

                    vpro.setVisible(true);
                    pro = vpro.vPro;

                    TXcODIGO.setText(pro.getProCodigo().toString());
                    txDescri.setText(pro.getProDescri().trim());
                    txPrecio1.setText(pro.getProPre2().toString());
                    txPrecio2.setText(pro.getProPre3().toString());
                    txPrecio.setText(pro.getProPre3().toString());
                } else {
                    txCantidad.grabFocus();
                }
            }
        }
    }//GEN-LAST:event_TXcODIGOKeyPressed

    private void TXcODIGOFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TXcODIGOFocusLost
        if (!TXcODIGO.getText().isEmpty()) {
            consultar();
        }
    }//GEN-LAST:event_TXcODIGOFocusLost

    private void txPrecioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txPrecioFocusGained
        txPrecio.selectAll();
    }//GEN-LAST:event_txPrecioFocusGained

    private void txCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txCantidadKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && txCantidad.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txCantidadKeyTyped

    private void txPrecioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txPrecioKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && txPrecio.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txPrecioKeyTyped

    private void TXcODIGOKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TXcODIGOKeyTyped
        /*char c = evt.getKeyChar();
         if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
         && (c != '.')) {
         evt.consume();
         }
         if (c == '.' && TXcODIGO.getText().contains(".")) {
         evt.consume();
         }*/
    }//GEN-LAST:event_TXcODIGOKeyTyped

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (modelo.getRowCount() > 0) {
            RegVenta();
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void GuaVenta() {
        int tipven;
        try {
            /*ven_cobro vc = new ven_cobro(null,true);
            
             vc.setTotal(df.parse(txTotal.getText().toString()).doubleValue());
             vc.setVisible(true);*/
            if (jRBContado.isSelected()) {
                Saldo = 0.0;
                Entrega = df.parse(txTotal.getText()).doubleValue();
                tipven = 0;
            } else {
                ven_cobro vc = new ven_cobro(null, true);

                vc.setTotal(df.parse(txTotal.getText()).doubleValue());
                vc.setVisible(true);

                Saldo = vc.saldo;
                Entrega = vc.entrega;
                System.out.println("Saldo : " + Saldo + " Entrega : " + Entrega);
                tipven = 1;
            }

            try {

                ResultSet rs;
                int codvent = 0;

                String Hora = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
                Cfecha = Calendar.getInstance();
                fecha = sdf.format(Cfecha.getTime());

                Venta ven = new Venta();

                ven.setVen_cliente(Integer.parseInt(txCodCli.getText()));
                ven.setVen_fecha(sdf.parse(fecha));
                ven.setVen_hora(Hora);
                ven.setVen_codven(usu.getAcc_id());
                ven.setVen_total(Entrega);

                con.setAutoCommit(false);
                stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

                String sql = "Insert into ventas(ven_fecha,ven_hora,ven_codven,ven_total,ven_cliente,ven_tipo) values('"
                        + ven.getVen_fecha() + "','"
                        + ven.getVen_hora() + "',"
                        + ven.getVen_codven() + ","
                        + ven.getVen_total() + ","
                        + ven.getVen_cliente() + ","
                        + tipven
                        + ")";

                stmt.executeUpdate(sql);

                rs = stmt.executeQuery("SELECT last_value from ventas_ven_codigo_seq");

                if (rs.next()) {
                    codvent = rs.getInt(1);
                }

                for (int i = 0; i < modelo.getRowCount(); i++) {
                    ItemVen itv = new ItemVen();
                    itv.setItv_codven(codvent);
                    itv.setItv_codpro(Integer.parseInt(TablaVentas.getValueAt(i, 0).toString()));
                    System.out.println("Itv canti " + Double.parseDouble(TablaVentas.getValueAt(i, 2).toString()));
                    itv.setItv_canti(Double.parseDouble(TablaVentas.getValueAt(i, 2).toString()));
                    itv.setItv_precio(Double.parseDouble(TablaVentas.getValueAt(i, 3).toString()));

                    sql = "Insert into item_ventas( itv_codven,itv_codpro,itv_canti,itv_precio) values("
                            + itv.getItv_codven() + ","
                            + itv.getItv_codpro() + ","
                            + itv.getItv_canti() + ","
                            + itv.getItv_precio()
                            + ")";

                    stmt.executeUpdate(sql);

                }
                if (tipven == 1) {
                    sql = "insert into deucli(dcl_numven,dcl_monto,dcl_fecha,dcl_codcli) values("
                            + codvent + "," + Saldo + ",'" + ven.getVen_fecha() + "'," + ven.getVen_cliente() + ")";
                    stmt.executeUpdate(sql);
                }
                //JOptionPane.showMessageDialog(this, "Venta Registrado con éxito");
                con.commit();
                limpiar();

                MyIcon icon = new MyIcon();
                int seleccion = JOptionPane.showOptionDialog(null,
                        "Seleccione opcion de impresión",
                        "Selector de opciones",
                        JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        icon, // null para icono por defecto.
                        new Object[]{"COMUN", "FACTURA", "CANCELAR"}, // null para YES, NO y CANCEL
                        "COMUN");

                if (seleccion == 0) {
                    archi = this.getClass().getResource("/reports/fac_ticket_comun.jasper");
                    imprimir(codvent);
                } else {
                    if (seleccion == 1) {
                        archi = this.getClass().getResource("/reports/fac_ticket.jasper");
                        imprimir(codvent);
                    }
                }

                //con.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al registrar Ventas " + e.getMessage());
                System.out.println(e.getMessage());
            }
        } catch (ParseException ex) {
            Logger.getLogger(Ventas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void RegVenta() {
        int tipven;
        try {
            /*ven_cobro vc = new ven_cobro(null,true);
            
             vc.setTotal(df.parse(txTotal.getText().toString()).doubleValue());
             vc.setVisible(true);*/
            if (jRBContado.isSelected()) {
                Saldo = 0.0;
                Entrega = df.parse(txTotal.getText()).doubleValue();
                tipven = 0;
            } else {
                ven_cobro vc = new ven_cobro(null, true);

                vc.setTotal(df.parse(txTotal.getText()).doubleValue());
                vc.setVisible(true);

                Saldo = vc.saldo;
                Entrega = vc.entrega;
                System.out.println("Saldo : " + Saldo + " Entrega : " + Entrega);
                tipven = 1;
            }

            codvent = 0;
            String Hora = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
            Cfecha = Calendar.getInstance();
            fecha = sdf.format(Cfecha.getTime());
            Venta ven = new Venta();
            ven.setVen_cliente(Integer.parseInt(txCodCli.getText()));
            ven.setVen_fecha(sdf.parse(fecha));
            ven.setVen_hora(Hora);
            ven.setVen_codven(usu.getAcc_id());
            ven.setVen_total(Entrega);
            ven.setTipven(tipven);
            ArrayList<ItemVen> lisItenVen = new ArrayList<>();
            for (int i = 0; i < modelo.getRowCount(); i++) {
                ItemVen itv = new ItemVen();
                itv.setItv_codven(codvent);
                itv.setItv_codpro(Integer.parseInt(TablaVentas.getValueAt(i, 0).toString()));
                System.out.println("Itv canti " + Double.parseDouble(TablaVentas.getValueAt(i, 2).toString()));
                itv.setItv_canti(Double.parseDouble(TablaVentas.getValueAt(i, 2).toString()));
                itv.setItv_precio(Double.parseDouble(TablaVentas.getValueAt(i, 3).toString()));
                lisItenVen.add(itv);
            }

            ven.setItemven(lisItenVen);

            vt = new ver_total(null, true);
            vt.setVenta(ven);
            vt.setVisible(true);
            codvent = vt.getNumven();
            tipfac = vt.getTipfac();

            MyIcon icon = new MyIcon();
            int seleccion = JOptionPane.showOptionDialog(null,
                    "Seleccione opcion de impresión",
                    "Selector de opciones",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    icon, // null para icono por defecto.
                    new Object[]{"IMPRIMIR", "CANCELAR"}, // null para YES, NO y CANCEL
                    "IMPRIMIR");

            if (seleccion == 0) {

                if (tipfac == 1) {
                    limpiar();
                    archi = this.getClass().getResource("/reports/fac_ticket_comun.jasper");
                    imprimir(codvent);
                } else {
                    limpiar();
                    archi = this.getClass().getResource("/reports/fac_ticket.jasper");
                    imprimir(codvent);
                }

            } else {
                limpiar();
            }

        } catch (ParseException ex) {
            Logger.getLogger(Ventas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean RestPro() {
        try {
            coneccion = new Coneccion();
            con = coneccion.getCon();
            con.setAutoCommit(false);
            stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            for (int i = 0; i < modelo.getRowCount(); i++) {
                ItemVen itv = new ItemVen();
                itv.setItv_codven(codvent);
                itv.setItv_codpro(Integer.parseInt(TablaVentas.getValueAt(i, 0).toString()));
                itv.setItv_canti(Double.parseDouble(TablaVentas.getValueAt(i, 2).toString()));
                itv.setItv_precio(Double.parseDouble(TablaVentas.getValueAt(i, 3).toString()));

                stmt.executeUpdate("update productos set pro_cant= " + "(pro_cant + " + itv.getItv_canti() + ") "
                        + "where pro_codigo=" + itv.getItv_codpro());
            }
            con.commit();
            con.close();
            return true;
        } catch (SQLException | NumberFormatException e) {

        }
        return false;
    }

    private void imprimir(int codven) throws ParseException {
        JasperReport reporte;
        JasperPrint reporte_view;
        coneccion = new Coneccion();
        con = coneccion.getCon();
        try {

            //archi = this.getClass().getResource("/reports/inf_factura.jasper");
            reporte = (JasperReport) JRLoader.loadObject(archi);
            Map<String, Object> param = new HashMap<>();
            param.put("NUMVEN", codven);
            reporte_view = JasperFillManager.fillReport(reporte, param, con);
            //JasperViewer.viewReport(reporte_view, false);
            JasperPrintManager.printReport(reporte_view, false);
            /*JasperPrintManager print1 = new JasperPrintManager();
             print1.printReport(reporte_view,false);*/
            //terminamos la conexion a la base de datos
            con.close();
            //limpiar();
        } catch (JRException E) {
        } catch (SQLException ex) {
            Logger.getLogger(Ventas.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    private void TablaVentasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TablaVentasKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int filasele = TablaVentas.getSelectedRow();

            try {
                coneccion = new Coneccion();
                con = coneccion.getCon();
                Number tot = df.parse(txTotal.getText());
                Number rtot = df.parse(TablaVentas.getValueAt(filasele, 4).toString());

                System.out.println("Total : " + tot + " Valor Tabla : " + rtot);
                txTotal.setText(df.format((tot.doubleValue() - rtot.doubleValue())));

                stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
                stmt.executeUpdate("update productos set pro_cant= " + "(pro_cant + " + Double.parseDouble(TablaVentas.getValueAt(filasele, 2).toString()) + ") "
                        + "where pro_codigo=" + Integer.parseInt(TablaVentas.getValueAt(filasele, 0).toString()));
                con.close();
            } catch (Exception e) {
                System.out.println(e.getCause() + " " + e.getMessage());
            }

            modelo.removeRow(filasele);
            TXcODIGO.setText("");
            txDescri.setText("");
            txPrecio1.setText("");
            txPrecio2.setText("");
            txPrecio.setText("");
            txCan.setText("");
            txCantidad.setText("");

            TXcODIGO.grabFocus();
            //TablaVentas.setModel(modelo);
        }
    }//GEN-LAST:event_TablaVentasKeyPressed

    private void TXcODIGOFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TXcODIGOFocusGained
        txCantidad.setText("");
        TXcODIGO.selectAll();

    }//GEN-LAST:event_TXcODIGOFocusGained

    private void txCodCliKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txCodCliKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F4) {
            ver_Cliente vcli = new ver_Cliente(null, true);
            vcli.setVisible(true);
            clie = vcli.vClie;
            if (vcli.vClie != null) {
                txCodCli.setText(clie.getCli_codigo().toString());
                txDesCli.setText(clie.getCli_nombre().trim());
            }

        } else {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                if (!txCodCli.getText().isEmpty()) {
                    consultarCliente();
                } else {
                    txCodCli.setText("0");
                    txDesCli.setText("Cliente ocasional");
                    TXcODIGO.grabFocus();
                }
            }
        }
    }//GEN-LAST:event_txCodCliKeyPressed

    public void llamarClie() {
        R_Clientes r_cli = new R_Clientes();
        this.add(r_cli);
        r_cli.setVisible(true);
    }
    private void txCodCliKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txCodCliKeyTyped
        char c = evt.getKeyChar();
        if (((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)
                && (c != '.')) {
            evt.consume();
        }
        if (c == '.' && TXcODIGO.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txCodCliKeyTyped

    private void txCodCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txCodCliFocusGained
        txCodCli.selectAll();
    }//GEN-LAST:event_txCodCliFocusGained

    private void txCodCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txCodCliFocusLost
        if (!txCodCli.getText().isEmpty()) {
            consultarCliente();
        } else {
            txCodCli.setText("0");
            txDesCli.setText("Cliente ocasional");
        }
    }//GEN-LAST:event_txCodCliFocusLost

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        if (modelo.getRowCount() > 0) {
            if (RestPro()) {
                limpiar();
                txCodCli.setText("");
                txDesCli.setText("");
                txCodCli.grabFocus();
            }
        } else {
            limpiar();
            txCodCli.setText("");
            txDesCli.setText("");
            txCodCli.grabFocus();
        }


    }//GEN-LAST:event_btCancelActionPerformed

    private void jRBCreditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBCreditoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRBCreditoActionPerformed

    private void jBAgregarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBAgregarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jBAgregar.doClick();
        }
    }//GEN-LAST:event_jBAgregarKeyPressed

    private void TXcODIGOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXcODIGOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXcODIGOActionPerformed

    private void txCantidadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txCantidadKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!txCantidad.getText().isEmpty()) {
                try {
                    double cant = df.parse(txCantidad.getText()).doubleValue();
                    if (cant > 0) {
                        jBAgregar.doClick();
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(Ventas.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }//GEN-LAST:event_txCantidadKeyPressed

    private void txCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txCantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txCantidadActionPerformed

    private void txDescriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txDescriActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txDescriActionPerformed

    private void txCantidadFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txCantidadFocusGained
        txCantidad.setText("1");
        txCantidad.selectAll();
    }//GEN-LAST:event_txCantidadFocusGained

    public void consultarCliente() {
        String sql;

        sql = "select cli_codigo,cli_ci,cli_nombre,cli_tel,cli_direc,"
                + "cli_ruc,cli_fecnac,sum(dcl_monto) as cli_deuda from "
                + "clientes LEFT JOIN deucli deu ON deu.dcl_codcli = cli_codigo "
                + "  where cli_codigo =" + txCodCli.getText() + "  group by cli_codigo,cli_ci,"
                + "cli_nombre,cli_tel,cli_direc,cli_ruc,cli_fecnac order by cli_codigo";

        Coneccion con = new Coneccion();
        ResultSet rs;
        Clientes cli = null;

        try {
            con.consulta(sql);
            rs = con.getRs();
            if (rs.next()) {
                txDesCli.setText(rs.getString("cli_nombre"));

                if (rs.getString("cli_deuda") != null) {
                    jlDeuda.setVisible(true);
                    jtxMonDeu.setVisible(true);
                    jtxMonDeu.setText(df.format(rs.getDouble("cli_deuda")));
                }
            }
            TXcODIGO.grabFocus();
            con.close();
        } catch (Exception e) {
            if (con != null) {
                con.close();
            }
        }
    }

    public void CargarTabla() throws ParseException {
        double total;
        //modelo.setRowCount(0);
        //  this.TablaVentas.setModel(modelo);
        coneccion = new Coneccion();
        con = coneccion.getCon();
        Productos p = pro;
        //System.out.print(p.toString());
        Object[] pro = new Object[modelo.getColumnCount()];
        pro[0] = p.getProCodigo();
        pro[1] = p.getProDescri();
        //System.out.println(df.parse(txCantidad.getText().toString()).doubleValue());
        pro[2] = df.parse(txCantidad.getText().toString()).doubleValue();
        pro[3] = df.parse(txPrecio.getText().toString()).doubleValue();

        total = ((df.parse(txPrecio.getText().toString()).doubleValue())
                * (df.parse(txCantidad.getText().toString()).doubleValue()));
        pro[4] = df.format(total);
        modelo.addRow(pro);
        try {
            stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
            stmt.executeUpdate("update productos set pro_cant= " + "(pro_cant - " + df.parse(txCantidad.getText().toString()).doubleValue() + ") "
                    + "where pro_codigo=" + p.getProCodigo());

            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error" + e.getMessage());
        }
        if (txTotal.getText().isEmpty()) {
            txTotal.setText(df.format(total));
        } else {
            //
            Number tot = df.parse(txTotal.getText().toString());
            //System.out.println(tot);
            total = tot.doubleValue() + total;
            //System.out.println(total);
            txTotal.setText(df.format(total));
        }
        //sorter = new TableRowSorter<TableModel>(modelo);
        //TablaVentas.setRowSorter(sorter);
        //TablaVentas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.TablaVentas.setModel(modelo);

    }

    private void TableModel() {
        modelo = (DefaultTableModel) TablaVentas.getModel();
        modelo.setRowCount(0);
        this.TablaVentas.setModel(modelo);
    }

    public void consultar() {
        String sql = "Select pro_codigo,pro_descri,pro_pre1,pro_pre2,pro_pre3,pro_cant,"
                + "pro_provee,pro_cate,pro_sect,pro_canmin,pro_venci"
                + " From productos where pro_codigo=" + TXcODIGO.getText() + " order by pro_codigo";

        Coneccion con = new Coneccion();
        ResultSet rs;

        try {
            con.consulta(sql);
            rs = con.getRs();
            if (rs.next()) {
                pro = new Productos();
                pro.setProCodigo(rs.getInt("pro_codigo"));
                pro.setProDescri(rs.getString("pro_descri"));
                pro.setProPre1(rs.getBigDecimal("pro_pre1"));
                pro.setProPre2(rs.getBigDecimal("pro_pre2"));
                pro.setProPre3(rs.getBigDecimal("pro_pre3"));
                pro.setProCant(rs.getBigDecimal("pro_cant"));
                pro.setProProvee(rs.getInt("pro_provee"));
                pro.setProCate(rs.getInt("pro_cate"));
                pro.setProSect(rs.getInt("pro_sect"));
                pro.setProCanmin(rs.getBigDecimal("pro_canmin"));
                pro.setProVenci(rs.getDate("pro_venci"));

                TXcODIGO.setText(pro.getProCodigo().toString());
                txDescri.setText(pro.getProDescri());
                txPrecio1.setText(pro.getProPre2().toString());
                txPrecio2.setText(pro.getProPre3().toString());
                txPrecio.setText(df.format(pro.getProPre3()));
                txCan.setText(df.format(pro.getProCant()));

            } else {
                sql = "Select pro_codigo,pro_descri,pro_pre1,pro_pre2,pro_pre3,pro_cant,"
                        + "pro_provee,pro_cate,pro_sect,pro_canmin,pro_venci"
                        + " From productos where pro_cbarra='" + TXcODIGO.getText().trim() + "' order by pro_codigo";

                con.consulta(sql);
                rs = con.getRs();
                if (rs.next()) {
                    pro = new Productos();
                    pro.setProCodigo(rs.getInt("pro_codigo"));
                    pro.setProDescri(rs.getString("pro_descri"));
                    pro.setProPre1(rs.getBigDecimal("pro_pre1"));
                    pro.setProPre2(rs.getBigDecimal("pro_pre2"));
                    pro.setProPre3(rs.getBigDecimal("pro_pre3"));
                    pro.setProCant(rs.getBigDecimal("pro_cant"));
                    pro.setProProvee(rs.getInt("pro_provee"));
                    pro.setProCate(rs.getInt("pro_cate"));
                    pro.setProSect(rs.getInt("pro_sect"));
                    pro.setProCanmin(rs.getBigDecimal("pro_canmin"));
                    pro.setProVenci(rs.getDate("pro_venci"));

                    TXcODIGO.setText(pro.getProCodigo().toString());
                    txDescri.setText(pro.getProDescri());
                    txPrecio1.setText(pro.getProPre2().toString());
                    txPrecio2.setText(pro.getProPre3().toString());
                    txPrecio.setText(df.format(pro.getProPre3()));
                    txCan.setText(df.format(pro.getProCant()));

                }
            }
            con.close();
        } catch (Exception e) {
            if (con.getCon() != null) {
                con.close();
            }
        }
    }

    private void reImprimir() {
        if (tipfac == 1) {
            archi = this.getClass().getResource("/reports/fac_ticket_comun.jasper");
            try {
                imprimir(codvent);
            } catch (ParseException ex) {
                Logger.getLogger(Ventas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void limpiar() {
        TXcODIGO.setText("");
        txDescri.setText("");
        txPrecio1.setText("");
        txPrecio2.setText("");
        txPrecio.setText("");
        txCan.setText("");
        txCantidad.setText("");
        txTotal.setText("");

        TXcODIGO.grabFocus();

        modelo.setRowCount(0);
        TablaVentas.setModel(modelo);

        jlDeuda.setVisible(false);
        jtxMonDeu.setVisible(false);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField TXcODIGO;
    private javax.swing.JTable TablaVentas;
    private javax.swing.ButtonGroup bGTipos;
    private javax.swing.JButton btCancel;
    private javax.swing.JButton jBAgregar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRBContado;
    private javax.swing.JRadioButton jRBCredito;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlDeuda;
    private javax.swing.JTextField jtxMonDeu;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField txCan;
    private javax.swing.JTextField txCantidad;
    private javax.swing.JTextField txCodCli;
    private javax.swing.JTextField txCodUsu;
    private javax.swing.JTextField txDesCli;
    private javax.swing.JTextField txDescri;
    private javax.swing.JTextField txDesusu;
    private javax.swing.JTextField txFecha;
    private javax.swing.JTextField txPrecio;
    private javax.swing.JTextField txPrecio1;
    private javax.swing.JTextField txPrecio2;
    private javax.swing.JTextField txTotal;
    // End of variables declaration//GEN-END:variables
}
